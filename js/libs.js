function hexToRgb(e){var t=/^#?([a-f\d])([a-f\d])([a-f\d])$/i;e=e.replace(t,function(e,t,n,i){return t+t+n+n+i+i});var n=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);return n?{r:parseInt(n[1],16),g:parseInt(n[2],16),b:parseInt(n[3],16)}:null}function clamp(e,t,n){return Math.min(Math.max(e,t),n)}function isInArray(e,t){return t.indexOf(e)>-1}!function(e,t){"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){function n(e){var t=!!e&&"length"in e&&e.length,n=fe.type(e);return"function"!==n&&!fe.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function i(e,t,n){if(fe.isFunction(t))return fe.grep(e,function(e,i){return!!t.call(e,i,e)!==n});if(t.nodeType)return fe.grep(e,function(e){return e===t!==n});if("string"==typeof t){if(Te.test(t))return fe.filter(t,e,n);t=fe.filter(t,e)}return fe.grep(e,function(e){return fe.inArray(e,t)>-1!==n})}function r(e,t){do e=e[t];while(e&&1!==e.nodeType);return e}function a(e){var t={};return fe.each(e.match(Ne)||[],function(e,n){t[n]=!0}),t}function o(){ie.addEventListener?(ie.removeEventListener("DOMContentLoaded",s),e.removeEventListener("load",s)):(ie.detachEvent("onreadystatechange",s),e.detachEvent("onload",s))}function s(){(ie.addEventListener||"load"===e.event.type||"complete"===ie.readyState)&&(o(),fe.ready())}function c(e,t,n){if(void 0===n&&1===e.nodeType){var i="data-"+t.replace(Me,"-$1").toLowerCase();if(n=e.getAttribute(i),"string"==typeof n){try{n="true"===n||"false"!==n&&("null"===n?null:+n+""===n?+n:qe.test(n)?fe.parseJSON(n):n)}catch(e){}fe.data(e,t,n)}else n=void 0}return n}function l(e){var t;for(t in e)if(("data"!==t||!fe.isEmptyObject(e[t]))&&"toJSON"!==t)return!1;return!0}function u(e,t,n,i){if(Le(e)){var r,a,o=fe.expando,s=e.nodeType,c=s?fe.cache:e,l=s?e[o]:e[o]&&o;if(l&&c[l]&&(i||c[l].data)||void 0!==n||"string"!=typeof t)return l||(l=s?e[o]=ne.pop()||fe.guid++:o),c[l]||(c[l]=s?{}:{toJSON:fe.noop}),"object"!=typeof t&&"function"!=typeof t||(i?c[l]=fe.extend(c[l],t):c[l].data=fe.extend(c[l].data,t)),a=c[l],i||(a.data||(a.data={}),a=a.data),void 0!==n&&(a[fe.camelCase(t)]=n),"string"==typeof t?(r=a[t],null==r&&(r=a[fe.camelCase(t)])):r=a,r}}function d(e,t,n){if(Le(e)){var i,r,a=e.nodeType,o=a?fe.cache:e,s=a?e[fe.expando]:fe.expando;if(o[s]){if(t&&(i=n?o[s]:o[s].data)){fe.isArray(t)?t=t.concat(fe.map(t,fe.camelCase)):t in i?t=[t]:(t=fe.camelCase(t),t=t in i?[t]:t.split(" ")),r=t.length;for(;r--;)delete i[t[r]];if(n?!l(i):!fe.isEmptyObject(i))return}(n||(delete o[s].data,l(o[s])))&&(a?fe.cleanData([e],!0):de.deleteExpando||o!=o.window?delete o[s]:o[s]=void 0)}}}function p(e,t,n,i){var r,a=1,o=20,s=i?function(){return i.cur()}:function(){return fe.css(e,t,"")},c=s(),l=n&&n[3]||(fe.cssNumber[t]?"":"px"),u=(fe.cssNumber[t]||"px"!==l&&+c)&&He.exec(fe.css(e,t));if(u&&u[3]!==l){l=l||u[3],n=n||[],u=+c||1;do a=a||".5",u/=a,fe.style(e,t,u+l);while(a!==(a=s()/c)&&1!==a&&--o)}return n&&(u=+u||+c||0,r=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=l,i.start=u,i.end=r)),r}function f(e){var t=$e.split("|"),n=e.createDocumentFragment();if(n.createElement)for(;t.length;)n.createElement(t.pop());return n}function h(e,t){var n,i,r=0,a="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):void 0;if(!a)for(a=[],n=e.childNodes||e;null!=(i=n[r]);r++)!t||fe.nodeName(i,t)?a.push(i):fe.merge(a,h(i,t));return void 0===t||t&&fe.nodeName(e,t)?fe.merge([e],a):a}function v(e,t){for(var n,i=0;null!=(n=e[i]);i++)fe._data(n,"globalEval",!t||fe._data(t[i],"globalEval"))}function m(e){ze.test(e.type)&&(e.defaultChecked=e.checked)}function y(e,t,n,i,r){for(var a,o,s,c,l,u,d,p=e.length,y=f(t),g=[],b=0;b<p;b++)if(o=e[b],o||0===o)if("object"===fe.type(o))fe.merge(g,o.nodeType?[o]:o);else if(Je.test(o)){for(c=c||y.appendChild(t.createElement("div")),l=(Ie.exec(o)||["",""])[1].toLowerCase(),d=Xe[l]||Xe._default,c.innerHTML=d[1]+fe.htmlPrefilter(o)+d[2],a=d[0];a--;)c=c.lastChild;if(!de.leadingWhitespace&&We.test(o)&&g.push(t.createTextNode(We.exec(o)[0])),!de.tbody)for(o="table"!==l||Ue.test(o)?"<table>"!==d[1]||Ue.test(o)?0:c:c.firstChild,a=o&&o.childNodes.length;a--;)fe.nodeName(u=o.childNodes[a],"tbody")&&!u.childNodes.length&&o.removeChild(u);for(fe.merge(g,c.childNodes),c.textContent="";c.firstChild;)c.removeChild(c.firstChild);c=y.lastChild}else g.push(t.createTextNode(o));for(c&&y.removeChild(c),de.appendChecked||fe.grep(h(g,"input"),m),b=0;o=g[b++];)if(i&&fe.inArray(o,i)>-1)r&&r.push(o);else if(s=fe.contains(o.ownerDocument,o),c=h(y.appendChild(o),"script"),s&&v(c),n)for(a=0;o=c[a++];)Be.test(o.type||"")&&n.push(o);return c=null,y}function g(){return!0}function b(){return!1}function x(){try{return ie.activeElement}catch(e){}}function w(e,t,n,i,r,a){var o,s;if("object"==typeof t){"string"!=typeof n&&(i=i||n,n=void 0);for(s in t)w(e,s,n,i,t[s],a);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),r===!1)r=b;else if(!r)return e;return 1===a&&(o=r,r=function(e){return fe().off(e),o.apply(this,arguments)},r.guid=o.guid||(o.guid=fe.guid++)),e.each(function(){fe.event.add(this,t,r,i,n)})}function k(e,t){return fe.nodeName(e,"table")&&fe.nodeName(11!==t.nodeType?t:t.firstChild,"tr")?e.getElementsByTagName("tbody")[0]||e.appendChild(e.ownerDocument.createElement("tbody")):e}function T(e){return e.type=(null!==fe.find.attr(e,"type"))+"/"+e.type,e}function _(e){var t=rt.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function C(e,t){if(1===t.nodeType&&fe.hasData(e)){var n,i,r,a=fe._data(e),o=fe._data(t,a),s=a.events;if(s){delete o.handle,o.events={};for(n in s)for(i=0,r=s[n].length;i<r;i++)fe.event.add(t,n,s[n][i])}o.data&&(o.data=fe.extend({},o.data))}}function A(e,t){var n,i,r;if(1===t.nodeType){if(n=t.nodeName.toLowerCase(),!de.noCloneEvent&&t[fe.expando]){r=fe._data(t);for(i in r.events)fe.removeEvent(t,i,r.handle);t.removeAttribute(fe.expando)}"script"===n&&t.text!==e.text?(T(t).text=e.text,_(t)):"object"===n?(t.parentNode&&(t.outerHTML=e.outerHTML),de.html5Clone&&e.innerHTML&&!fe.trim(t.innerHTML)&&(t.innerHTML=e.innerHTML)):"input"===n&&ze.test(e.type)?(t.defaultChecked=t.checked=e.checked,t.value!==e.value&&(t.value=e.value)):"option"===n?t.defaultSelected=t.selected=e.defaultSelected:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}}function E(e,t,n,i){t=ae.apply([],t);var r,a,o,s,c,l,u=0,d=e.length,p=d-1,f=t[0],v=fe.isFunction(f);if(v||d>1&&"string"==typeof f&&!de.checkClone&&it.test(f))return e.each(function(r){var a=e.eq(r);v&&(t[0]=f.call(this,r,a.html())),E(a,t,n,i)});if(d&&(l=y(t,e[0].ownerDocument,!1,e,i),r=l.firstChild,1===l.childNodes.length&&(l=r),r||i)){for(s=fe.map(h(l,"script"),T),o=s.length;u<d;u++)a=l,u!==p&&(a=fe.clone(a,!0,!0),o&&fe.merge(s,h(a,"script"))),n.call(e[u],a,u);if(o)for(c=s[s.length-1].ownerDocument,fe.map(s,_),u=0;u<o;u++)a=s[u],Be.test(a.type||"")&&!fe._data(a,"globalEval")&&fe.contains(c,a)&&(a.src?fe._evalUrl&&fe._evalUrl(a.src):fe.globalEval((a.text||a.textContent||a.innerHTML||"").replace(at,"")));l=r=null}return e}function S(e,t,n){for(var i,r=t?fe.filter(t,e):e,a=0;null!=(i=r[a]);a++)n||1!==i.nodeType||fe.cleanData(h(i)),i.parentNode&&(n&&fe.contains(i.ownerDocument,i)&&v(h(i,"script")),i.parentNode.removeChild(i));return e}function N(e,t){var n=fe(t.createElement(e)).appendTo(t.body),i=fe.css(n[0],"display");return n.detach(),i}function j(e){var t=ie,n=lt[e];return n||(n=N(e,t),"none"!==n&&n||(ct=(ct||fe("<iframe frameborder='0' width='0' height='0'/>")).appendTo(t.documentElement),t=(ct[0].contentWindow||ct[0].contentDocument).document,t.write(),t.close(),n=N(e,t),ct.detach()),lt[e]=n),n}function D(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function L(e){if(e in _t)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=Tt.length;n--;)if(e=Tt[n]+t,e in _t)return e}function q(e,t){for(var n,i,r,a=[],o=0,s=e.length;o<s;o++)i=e[o],i.style&&(a[o]=fe._data(i,"olddisplay"),n=i.style.display,t?(a[o]||"none"!==n||(i.style.display=""),""===i.style.display&&Re(i)&&(a[o]=fe._data(i,"olddisplay",j(i.nodeName)))):(r=Re(i),(n&&"none"!==n||!r)&&fe._data(i,"olddisplay",r?n:fe.css(i,"display"))));for(o=0;o<s;o++)i=e[o],i.style&&(t&&"none"!==i.style.display&&""!==i.style.display||(i.style.display=t?a[o]||"":"none"));return e}function M(e,t,n){var i=xt.exec(t);return i?Math.max(0,i[1]-(n||0))+(i[2]||"px"):t}function F(e,t,n,i,r){for(var a=n===(i?"border":"content")?4:"width"===t?1:0,o=0;a<4;a+=2)"margin"===n&&(o+=fe.css(e,n+Pe[a],!0,r)),i?("content"===n&&(o-=fe.css(e,"padding"+Pe[a],!0,r)),"margin"!==n&&(o-=fe.css(e,"border"+Pe[a]+"Width",!0,r))):(o+=fe.css(e,"padding"+Pe[a],!0,r),"padding"!==n&&(o+=fe.css(e,"border"+Pe[a]+"Width",!0,r)));return o}function H(e,t,n){var i=!0,r="width"===t?e.offsetWidth:e.offsetHeight,a=ht(e),o=de.boxSizing&&"border-box"===fe.css(e,"boxSizing",!1,a);if(r<=0||null==r){if(r=vt(e,t,a),(r<0||null==r)&&(r=e.style[t]),dt.test(r))return r;i=o&&(de.boxSizingReliable()||r===e.style[t]),r=parseFloat(r)||0}return r+F(e,t,n||(o?"border":"content"),i,a)+"px"}function P(e,t,n,i,r){return new P.prototype.init(e,t,n,i,r)}function R(){return e.setTimeout(function(){Ct=void 0}),Ct=fe.now()}function O(e,t){var n,i={height:e},r=0;for(t=t?1:0;r<4;r+=2-t)n=Pe[r],i["margin"+n]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function z(e,t,n){for(var i,r=(W.tweeners[t]||[]).concat(W.tweeners["*"]),a=0,o=r.length;a<o;a++)if(i=r[a].call(n,t,e))return i}function I(e,t,n){var i,r,a,o,s,c,l,u,d=this,p={},f=e.style,h=e.nodeType&&Re(e),v=fe._data(e,"fxshow");n.queue||(s=fe._queueHooks(e,"fx"),null==s.unqueued&&(s.unqueued=0,c=s.empty.fire,s.empty.fire=function(){s.unqueued||c()}),s.unqueued++,d.always(function(){d.always(function(){s.unqueued--,fe.queue(e,"fx").length||s.empty.fire()})})),1===e.nodeType&&("height"in t||"width"in t)&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],l=fe.css(e,"display"),u="none"===l?fe._data(e,"olddisplay")||j(e.nodeName):l,"inline"===u&&"none"===fe.css(e,"float")&&(de.inlineBlockNeedsLayout&&"inline"!==j(e.nodeName)?f.zoom=1:f.display="inline-block")),n.overflow&&(f.overflow="hidden",de.shrinkWrapBlocks()||d.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]}));for(i in t)if(r=t[i],Et.exec(r)){if(delete t[i],a=a||"toggle"===r,r===(h?"hide":"show")){if("show"!==r||!v||void 0===v[i])continue;h=!0}p[i]=v&&v[i]||fe.style(e,i)}else l=void 0;if(fe.isEmptyObject(p))"inline"===("none"===l?j(e.nodeName):l)&&(f.display=l);else{v?"hidden"in v&&(h=v.hidden):v=fe._data(e,"fxshow",{}),a&&(v.hidden=!h),h?fe(e).show():d.done(function(){fe(e).hide()}),d.done(function(){var t;fe._removeData(e,"fxshow");for(t in p)fe.style(e,t,p[t])});for(i in p)o=z(h?v[i]:0,i,d),i in v||(v[i]=o.start,h&&(o.end=o.start,o.start="width"===i||"height"===i?1:0))}}function B(e,t){var n,i,r,a,o;for(n in e)if(i=fe.camelCase(n),r=t[i],a=e[n],fe.isArray(a)&&(r=a[1],a=e[n]=a[0]),n!==i&&(e[i]=a,delete e[n]),o=fe.cssHooks[i],o&&"expand"in o){a=o.expand(a),delete e[i];for(n in a)n in e||(e[n]=a[n],t[n]=r)}else t[i]=r}function W(e,t,n){var i,r,a=0,o=W.prefilters.length,s=fe.Deferred().always(function(){delete c.elem}),c=function(){if(r)return!1;for(var t=Ct||R(),n=Math.max(0,l.startTime+l.duration-t),i=n/l.duration||0,a=1-i,o=0,c=l.tweens.length;o<c;o++)l.tweens[o].run(a);return s.notifyWith(e,[l,a,n]),a<1&&c?n:(s.resolveWith(e,[l]),!1)},l=s.promise({elem:e,props:fe.extend({},t),opts:fe.extend(!0,{specialEasing:{},easing:fe.easing._default},n),originalProperties:t,originalOptions:n,startTime:Ct||R(),duration:n.duration,tweens:[],createTween:function(t,n){var i=fe.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(i),i},stop:function(t){var n=0,i=t?l.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)l.tweens[n].run(1);return t?(s.notifyWith(e,[l,1,0]),s.resolveWith(e,[l,t])):s.rejectWith(e,[l,t]),this}}),u=l.props;for(B(u,l.opts.specialEasing);a<o;a++)if(i=W.prefilters[a].call(l,e,u,l.opts))return fe.isFunction(i.stop)&&(fe._queueHooks(l.elem,l.opts.queue).stop=fe.proxy(i.stop,i)),i;return fe.map(u,z,l),fe.isFunction(l.opts.start)&&l.opts.start.call(e,l),fe.fx.timer(fe.extend(c,{elem:e,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function $(e){return fe.attr(e,"class")||""}function X(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,a=t.toLowerCase().match(Ne)||[];if(fe.isFunction(n))for(;i=a[r++];)"+"===i.charAt(0)?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function J(e,t,n,i){function r(s){var c;return a[s]=!0,fe.each(e[s]||[],function(e,s){var l=s(t,n,i);return"string"!=typeof l||o||a[l]?o?!(c=l):void 0:(t.dataTypes.unshift(l),r(l),!1)}),c}var a={},o=e===Kt;return r(t.dataTypes[0])||!a["*"]&&r("*")}function U(e,t){var n,i,r=fe.ajaxSettings.flatOptions||{};for(i in t)void 0!==t[i]&&((r[i]?e:n||(n={}))[i]=t[i]);return n&&fe.extend(!0,e,n),e}function V(e,t,n){for(var i,r,a,o,s=e.contents,c=e.dataTypes;"*"===c[0];)c.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(o in s)if(s[o]&&s[o].test(r)){c.unshift(o);break}if(c[0]in n)a=c[0];else{for(o in n){if(!c[0]||e.converters[o+" "+c[0]]){a=o;break}i||(i=o)}a=a||i}if(a)return a!==c[0]&&c.unshift(a),n[a]}function Y(e,t,n,i){var r,a,o,s,c,l={},u=e.dataTypes.slice();if(u[1])for(o in e.converters)l[o.toLowerCase()]=e.converters[o];for(a=u.shift();a;)if(e.responseFields[a]&&(n[e.responseFields[a]]=t),!c&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),c=a,a=u.shift())if("*"===a)a=c;else if("*"!==c&&c!==a){if(o=l[c+" "+a]||l["* "+a],!o)for(r in l)if(s=r.split(" "),s[1]===a&&(o=l[c+" "+s[0]]||l["* "+s[0]])){o===!0?o=l[r]:l[r]!==!0&&(a=s[0],u.unshift(s[1]));break}if(o!==!0)if(o&&e.throws)t=o(t);else try{t=o(t)}catch(e){return{state:"parsererror",error:o?e:"No conversion from "+c+" to "+a}}}return{state:"success",data:t}}function G(e){return e.style&&e.style.display||fe.css(e,"display")}function Q(e){if(!fe.contains(e.ownerDocument||ie,e))return!0;for(;e&&1===e.nodeType;){if("none"===G(e)||"hidden"===e.type)return!0;e=e.parentNode}return!1}function K(e,t,n,i){var r;if(fe.isArray(t))fe.each(t,function(t,r){n||rn.test(e)?i(e,r):K(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)});else if(n||"object"!==fe.type(t))i(e,t);else for(r in t)K(e+"["+r+"]",t[r],n,i)}function Z(){try{return new e.XMLHttpRequest}catch(e){}}function ee(){try{return new e.ActiveXObject("Microsoft.XMLHTTP")}catch(e){}}function te(e){return fe.isWindow(e)?e:9===e.nodeType&&(e.defaultView||e.parentWindow)}var ne=[],ie=e.document,re=ne.slice,ae=ne.concat,oe=ne.push,se=ne.indexOf,ce={},le=ce.toString,ue=ce.hasOwnProperty,de={},pe="1.12.4",fe=function(e,t){return new fe.fn.init(e,t)},he=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,ve=/^-ms-/,me=/-([\da-z])/gi,ye=function(e,t){return t.toUpperCase()};fe.fn=fe.prototype={jquery:pe,constructor:fe,selector:"",length:0,toArray:function(){return re.call(this)},get:function(e){return null!=e?e<0?this[e+this.length]:this[e]:re.call(this)},pushStack:function(e){var t=fe.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e){return fe.each(this,e)},map:function(e){return this.pushStack(fe.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(re.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:oe,sort:ne.sort,splice:ne.splice},fe.extend=fe.fn.extend=function(){var e,t,n,i,r,a,o=arguments[0]||{},s=1,c=arguments.length,l=!1;for("boolean"==typeof o&&(l=o,o=arguments[s]||{},s++),"object"==typeof o||fe.isFunction(o)||(o={}),s===c&&(o=this,s--);s<c;s++)if(null!=(r=arguments[s]))for(i in r)e=o[i],n=r[i],o!==n&&(l&&n&&(fe.isPlainObject(n)||(t=fe.isArray(n)))?(t?(t=!1,a=e&&fe.isArray(e)?e:[]):a=e&&fe.isPlainObject(e)?e:{},o[i]=fe.extend(l,a,n)):void 0!==n&&(o[i]=n));return o},fe.extend({expando:"jQuery"+(pe+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===fe.type(e)},isArray:Array.isArray||function(e){return"array"===fe.type(e)},isWindow:function(e){return null!=e&&e==e.window},isNumeric:function(e){var t=e&&e.toString();return!fe.isArray(e)&&t-parseFloat(t)+1>=0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},isPlainObject:function(e){var t;if(!e||"object"!==fe.type(e)||e.nodeType||fe.isWindow(e))return!1;try{if(e.constructor&&!ue.call(e,"constructor")&&!ue.call(e.constructor.prototype,"isPrototypeOf"))return!1}catch(e){return!1}if(!de.ownFirst)for(t in e)return ue.call(e,t);for(t in e);return void 0===t||ue.call(e,t)},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?ce[le.call(e)]||"object":typeof e},globalEval:function(t){t&&fe.trim(t)&&(e.execScript||function(t){e.eval.call(e,t)})(t)},camelCase:function(e){return e.replace(ve,"ms-").replace(me,ye)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t){var i,r=0;if(n(e))for(i=e.length;r<i&&t.call(e[r],r,e[r])!==!1;r++);else for(r in e)if(t.call(e[r],r,e[r])===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(he,"")},makeArray:function(e,t){var i=t||[];return null!=e&&(n(Object(e))?fe.merge(i,"string"==typeof e?[e]:e):oe.call(i,e)),i},inArray:function(e,t,n){var i;if(t){if(se)return se.call(t,e,n);for(i=t.length,n=n?n<0?Math.max(0,i+n):n:0;n<i;n++)if(n in t&&t[n]===e)return n}return-1},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;)e[r++]=t[i++];if(n!==n)for(;void 0!==t[i];)e[r++]=t[i++];return e.length=r,e},grep:function(e,t,n){for(var i,r=[],a=0,o=e.length,s=!n;a<o;a++)i=!t(e[a],a),i!==s&&r.push(e[a]);return r},map:function(e,t,i){var r,a,o=0,s=[];if(n(e))for(r=e.length;o<r;o++)a=t(e[o],o,i),null!=a&&s.push(a);else for(o in e)a=t(e[o],o,i),null!=a&&s.push(a);return ae.apply([],s)},guid:1,proxy:function(e,t){var n,i,r;if("string"==typeof t&&(r=e[t],t=e,e=r),fe.isFunction(e))return n=re.call(arguments,2),i=function(){return e.apply(t||this,n.concat(re.call(arguments)))},i.guid=e.guid=e.guid||fe.guid++,i},now:function(){return+new Date},support:de}),"function"==typeof Symbol&&(fe.fn[Symbol.iterator]=ne[Symbol.iterator]),fe.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){ce["[object "+t+"]"]=t.toLowerCase()});var ge=function(e){function t(e,t,n,i){var r,a,o,s,c,l,d,f,h=t&&t.ownerDocument,v=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==v&&9!==v&&11!==v)return n;if(!i&&((t?t.ownerDocument||t:z)!==L&&D(t),t=t||L,M)){if(11!==v&&(l=ye.exec(e)))if(r=l[1]){if(9===v){if(!(o=t.getElementById(r)))return n;if(o.id===r)return n.push(o),n}else if(h&&(o=h.getElementById(r))&&R(t,o)&&o.id===r)return n.push(o),n}else{if(l[2])return K.apply(n,t.getElementsByTagName(e)),n;if((r=l[3])&&w.getElementsByClassName&&t.getElementsByClassName)return K.apply(n,t.getElementsByClassName(r)),n}if(w.qsa&&!X[e+" "]&&(!F||!F.test(e))){if(1!==v)h=t,f=e;else if("object"!==t.nodeName.toLowerCase()){for((s=t.getAttribute("id"))?s=s.replace(be,"\\$&"):t.setAttribute("id",s=O),d=C(e),a=d.length,c=pe.test(s)?"#"+s:"[id='"+s+"']";a--;)d[a]=c+" "+p(d[a]);f=d.join(","),h=ge.test(e)&&u(t.parentNode)||t}if(f)try{return K.apply(n,h.querySelectorAll(f)),n}catch(e){}finally{s===O&&t.removeAttribute("id")}}}return E(e.replace(se,"$1"),t,n,i)}function n(){function e(n,i){return t.push(n+" ")>k.cacheLength&&delete e[t.shift()],e[n+" "]=i}var t=[];return e}function i(e){return e[O]=!0,e}function r(e){var t=L.createElement("div");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function a(e,t){for(var n=e.split("|"),i=n.length;i--;)k.attrHandle[n[i]]=t}function o(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||U)-(~e.sourceIndex||U);if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function s(e){return function(t){var n=t.nodeName.toLowerCase();return"input"===n&&t.type===e}}function c(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function l(e){return i(function(t){return t=+t,i(function(n,i){for(var r,a=e([],n.length,t),o=a.length;o--;)n[r=a[o]]&&(n[r]=!(i[r]=n[r]))})})}function u(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function d(){}function p(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function f(e,t,n){var i=t.dir,r=n&&"parentNode"===i,a=B++;return t.first?function(t,n,a){for(;t=t[i];)if(1===t.nodeType||r)return e(t,n,a)}:function(t,n,o){var s,c,l,u=[I,a];if(o){for(;t=t[i];)if((1===t.nodeType||r)&&e(t,n,o))return!0}else for(;t=t[i];)if(1===t.nodeType||r){if(l=t[O]||(t[O]={}),c=l[t.uniqueID]||(l[t.uniqueID]={}),(s=c[i])&&s[0]===I&&s[1]===a)return u[2]=s[2];if(c[i]=u,u[2]=e(t,n,o))return!0}}}function h(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function v(e,n,i){for(var r=0,a=n.length;r<a;r++)t(e,n[r],i);return i}function m(e,t,n,i,r){for(var a,o=[],s=0,c=e.length,l=null!=t;s<c;s++)(a=e[s])&&(n&&!n(a,i,r)||(o.push(a),l&&t.push(s)));return o}function y(e,t,n,r,a,o){return r&&!r[O]&&(r=y(r)),a&&!a[O]&&(a=y(a,o)),i(function(i,o,s,c){var l,u,d,p=[],f=[],h=o.length,y=i||v(t||"*",s.nodeType?[s]:s,[]),g=!e||!i&&t?y:m(y,p,e,s,c),b=n?a||(i?e:h||r)?[]:o:g;if(n&&n(g,b,s,c),r)for(l=m(b,f),r(l,[],s,c),u=l.length;u--;)(d=l[u])&&(b[f[u]]=!(g[f[u]]=d));if(i){if(a||e){if(a){for(l=[],u=b.length;u--;)(d=b[u])&&l.push(g[u]=d);a(null,b=[],l,c)}for(u=b.length;u--;)(d=b[u])&&(l=a?ee(i,d):p[u])>-1&&(i[l]=!(o[l]=d))}}else b=m(b===o?b.splice(h,b.length):b),a?a(null,o,b,c):K.apply(o,b)})}function g(e){for(var t,n,i,r=e.length,a=k.relative[e[0].type],o=a||k.relative[" "],s=a?1:0,c=f(function(e){return e===t},o,!0),l=f(function(e){return ee(t,e)>-1},o,!0),u=[function(e,n,i){var r=!a&&(i||n!==S)||((t=n).nodeType?c(e,n,i):l(e,n,i));return t=null,r}];s<r;s++)if(n=k.relative[e[s].type])u=[f(h(u),n)];else{if(n=k.filter[e[s].type].apply(null,e[s].matches),n[O]){for(i=++s;i<r&&!k.relative[e[i].type];i++);return y(s>1&&h(u),s>1&&p(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(se,"$1"),n,s<i&&g(e.slice(s,i)),i<r&&g(e=e.slice(i)),i<r&&p(e))}u.push(n)}return h(u)}function b(e,n){var r=n.length>0,a=e.length>0,o=function(i,o,s,c,l){var u,d,p,f=0,h="0",v=i&&[],y=[],g=S,b=i||a&&k.find.TAG("*",l),x=I+=null==g?1:Math.random()||.1,w=b.length;for(l&&(S=o===L||o||l);h!==w&&null!=(u=b[h]);h++){if(a&&u){for(d=0,o||u.ownerDocument===L||(D(u),s=!M);p=e[d++];)if(p(u,o||L,s)){c.push(u);break}l&&(I=x)}r&&((u=!p&&u)&&f--,i&&v.push(u))}if(f+=h,r&&h!==f){for(d=0;p=n[d++];)p(v,y,o,s);if(i){if(f>0)for(;h--;)v[h]||y[h]||(y[h]=G.call(c));y=m(y)}K.apply(c,y),l&&!i&&y.length>0&&f+n.length>1&&t.uniqueSort(c)}return l&&(I=x,S=g),v};return r?i(o):o}var x,w,k,T,_,C,A,E,S,N,j,D,L,q,M,F,H,P,R,O="sizzle"+1*new Date,z=e.document,I=0,B=0,W=n(),$=n(),X=n(),J=function(e,t){return e===t&&(j=!0),0},U=1<<31,V={}.hasOwnProperty,Y=[],G=Y.pop,Q=Y.push,K=Y.push,Z=Y.slice,ee=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ne="[\\x20\\t\\r\\n\\f]",ie="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",re="\\["+ne+"*("+ie+")(?:"+ne+"*([*^$|!~]?=)"+ne+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+ie+"))|)"+ne+"*\\]",ae=":("+ie+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+re+")*)|.*)\\)|)",oe=new RegExp(ne+"+","g"),se=new RegExp("^"+ne+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ne+"+$","g"),ce=new RegExp("^"+ne+"*,"+ne+"*"),le=new RegExp("^"+ne+"*([>+~]|"+ne+")"+ne+"*"),ue=new RegExp("="+ne+"*([^\\]'\"]*?)"+ne+"*\\]","g"),de=new RegExp(ae),pe=new RegExp("^"+ie+"$"),fe={ID:new RegExp("^#("+ie+")"),CLASS:new RegExp("^\\.("+ie+")"),TAG:new RegExp("^("+ie+"|[*])"),ATTR:new RegExp("^"+re),PSEUDO:new RegExp("^"+ae),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ne+"*(even|odd|(([+-]|)(\\d*)n|)"+ne+"*(?:([+-]|)"+ne+"*(\\d+)|))"+ne+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ne+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ne+"*((?:-\\d)?\\d*)"+ne+"*\\)|)(?=[^-]|$)","i")},he=/^(?:input|select|textarea|button)$/i,ve=/^h\d$/i,me=/^[^{]+\{\s*\[native \w/,ye=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ge=/[+~]/,be=/'|\\/g,xe=new RegExp("\\\\([\\da-f]{1,6}"+ne+"?|("+ne+")|.)","ig"),we=function(e,t,n){var i="0x"+t-65536;return i!==i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},ke=function(){D()};try{K.apply(Y=Z.call(z.childNodes),z.childNodes),Y[z.childNodes.length].nodeType}catch(e){K={apply:Y.length?function(e,t){Q.apply(e,Z.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}w=t.support={},_=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},D=t.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:z;return i!==L&&9===i.nodeType&&i.documentElement?(L=i,q=L.documentElement,M=!_(L),(n=L.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",ke,!1):n.attachEvent&&n.attachEvent("onunload",ke)),w.attributes=r(function(e){return e.className="i",!e.getAttribute("className")}),w.getElementsByTagName=r(function(e){return e.appendChild(L.createComment("")),!e.getElementsByTagName("*").length}),w.getElementsByClassName=me.test(L.getElementsByClassName),w.getById=r(function(e){return q.appendChild(e).id=O,!L.getElementsByName||!L.getElementsByName(O).length}),w.getById?(k.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&M){var n=t.getElementById(e);return n?[n]:[]}},k.filter.ID=function(e){var t=e.replace(xe,we);return function(e){return e.getAttribute("id")===t}}):(delete k.find.ID,k.filter.ID=function(e){var t=e.replace(xe,we);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}}),k.find.TAG=w.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):w.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,a=t.getElementsByTagName(e);if("*"===e){for(;n=a[r++];)1===n.nodeType&&i.push(n);return i}return a},k.find.CLASS=w.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&M)return t.getElementsByClassName(e)},H=[],F=[],(w.qsa=me.test(L.querySelectorAll))&&(r(function(e){q.appendChild(e).innerHTML="<a id='"+O+"'></a><select id='"+O+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&F.push("[*^$]="+ne+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||F.push("\\["+ne+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+O+"-]").length||F.push("~="),e.querySelectorAll(":checked").length||F.push(":checked"),e.querySelectorAll("a#"+O+"+*").length||F.push(".#.+[+~]")}),r(function(e){var t=L.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&F.push("name"+ne+"*[*^$|!~]?="),e.querySelectorAll(":enabled").length||F.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),F.push(",.*:")})),(w.matchesSelector=me.test(P=q.matches||q.webkitMatchesSelector||q.mozMatchesSelector||q.oMatchesSelector||q.msMatchesSelector))&&r(function(e){w.disconnectedMatch=P.call(e,"div"),P.call(e,"[s!='']:x"),H.push("!=",ae)}),F=F.length&&new RegExp(F.join("|")),H=H.length&&new RegExp(H.join("|")),t=me.test(q.compareDocumentPosition),R=t||me.test(q.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},J=t?function(e,t){if(e===t)return j=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n?n:(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!w.sortDetached&&t.compareDocumentPosition(e)===n?e===L||e.ownerDocument===z&&R(z,e)?-1:t===L||t.ownerDocument===z&&R(z,t)?1:N?ee(N,e)-ee(N,t):0:4&n?-1:1)}:function(e,t){if(e===t)return j=!0,0;var n,i=0,r=e.parentNode,a=t.parentNode,s=[e],c=[t];if(!r||!a)return e===L?-1:t===L?1:r?-1:a?1:N?ee(N,e)-ee(N,t):0;if(r===a)return o(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)c.unshift(n);for(;s[i]===c[i];)i++;return i?o(s[i],c[i]):s[i]===z?-1:c[i]===z?1:0},L):L},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==L&&D(e),n=n.replace(ue,"='$1']"),w.matchesSelector&&M&&!X[n+" "]&&(!H||!H.test(n))&&(!F||!F.test(n)))try{var i=P.call(e,n);if(i||w.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return t(n,L,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==L&&D(e),R(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==L&&D(e);var n=k.attrHandle[t.toLowerCase()],i=n&&V.call(k.attrHandle,t.toLowerCase())?n(e,t,!M):void 0;return void 0!==i?i:w.attributes||!M?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],i=0,r=0;if(j=!w.detectDuplicates,N=!w.sortStable&&e.slice(0),e.sort(J),j){for(;t=e[r++];)t===e[r]&&(i=n.push(r));for(;i--;)e.splice(n[i],1)}return N=null,e},T=t.getText=function(e){var t,n="",i=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=T(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[i++];)n+=T(t);return n},k=t.selectors={cacheLength:50,createPseudo:i,match:fe,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(xe,we),e[3]=(e[3]||e[4]||e[5]||"").replace(xe,we),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return fe.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&de.test(n)&&(t=C(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(xe,we).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=W[e+" "];return t||(t=new RegExp("(^|"+ne+")"+e+"("+ne+"|$)"))&&W(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,i){return function(r){var a=t.attr(r,e);return null==a?"!="===n:!n||(a+="","="===n?a===i:"!="===n?a!==i:"^="===n?i&&0===a.indexOf(i):"*="===n?i&&a.indexOf(i)>-1:"$="===n?i&&a.slice(-i.length)===i:"~="===n?(" "+a.replace(oe," ")+" ").indexOf(i)>-1:"|="===n&&(a===i||a.slice(0,i.length+1)===i+"-"))}},CHILD:function(e,t,n,i,r){var a="nth"!==e.slice(0,3),o="last"!==e.slice(-4),s="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,c){var l,u,d,p,f,h,v=a!==o?"nextSibling":"previousSibling",m=t.parentNode,y=s&&t.nodeName.toLowerCase(),g=!c&&!s,b=!1;
if(m){if(a){for(;v;){for(p=t;p=p[v];)if(s?p.nodeName.toLowerCase()===y:1===p.nodeType)return!1;h=v="only"===e&&!h&&"nextSibling"}return!0}if(h=[o?m.firstChild:m.lastChild],o&&g){for(p=m,d=p[O]||(p[O]={}),u=d[p.uniqueID]||(d[p.uniqueID]={}),l=u[e]||[],f=l[0]===I&&l[1],b=f&&l[2],p=f&&m.childNodes[f];p=++f&&p&&p[v]||(b=f=0)||h.pop();)if(1===p.nodeType&&++b&&p===t){u[e]=[I,f,b];break}}else if(g&&(p=t,d=p[O]||(p[O]={}),u=d[p.uniqueID]||(d[p.uniqueID]={}),l=u[e]||[],f=l[0]===I&&l[1],b=f),b===!1)for(;(p=++f&&p&&p[v]||(b=f=0)||h.pop())&&((s?p.nodeName.toLowerCase()!==y:1!==p.nodeType)||!++b||(g&&(d=p[O]||(p[O]={}),u=d[p.uniqueID]||(d[p.uniqueID]={}),u[e]=[I,b]),p!==t)););return b-=r,b===i||b%i===0&&b/i>=0}}},PSEUDO:function(e,n){var r,a=k.pseudos[e]||k.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return a[O]?a(n):a.length>1?(r=[e,e,"",n],k.setFilters.hasOwnProperty(e.toLowerCase())?i(function(e,t){for(var i,r=a(e,n),o=r.length;o--;)i=ee(e,r[o]),e[i]=!(t[i]=r[o])}):function(e){return a(e,0,r)}):a}},pseudos:{not:i(function(e){var t=[],n=[],r=A(e.replace(se,"$1"));return r[O]?i(function(e,t,n,i){for(var a,o=r(e,null,i,[]),s=e.length;s--;)(a=o[s])&&(e[s]=!(t[s]=a))}):function(e,i,a){return t[0]=e,r(t,null,a,n),t[0]=null,!n.pop()}}),has:i(function(e){return function(n){return t(e,n).length>0}}),contains:i(function(e){return e=e.replace(xe,we),function(t){return(t.textContent||t.innerText||T(t)).indexOf(e)>-1}}),lang:i(function(e){return pe.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(xe,we).toLowerCase(),function(t){var n;do if(n=M?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===q},focus:function(e){return e===L.activeElement&&(!L.hasFocus||L.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!k.pseudos.empty(e)},header:function(e){return ve.test(e.nodeName)},input:function(e){return he.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,n){return[n<0?n+t:n]}),even:l(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:l(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:l(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:l(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}},k.pseudos.nth=k.pseudos.eq;for(x in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})k.pseudos[x]=s(x);for(x in{submit:!0,reset:!0})k.pseudos[x]=c(x);return d.prototype=k.filters=k.pseudos,k.setFilters=new d,C=t.tokenize=function(e,n){var i,r,a,o,s,c,l,u=$[e+" "];if(u)return n?0:u.slice(0);for(s=e,c=[],l=k.preFilter;s;){i&&!(r=ce.exec(s))||(r&&(s=s.slice(r[0].length)||s),c.push(a=[])),i=!1,(r=le.exec(s))&&(i=r.shift(),a.push({value:i,type:r[0].replace(se," ")}),s=s.slice(i.length));for(o in k.filter)!(r=fe[o].exec(s))||l[o]&&!(r=l[o](r))||(i=r.shift(),a.push({value:i,type:o,matches:r}),s=s.slice(i.length));if(!i)break}return n?s.length:s?t.error(e):$(e,c).slice(0)},A=t.compile=function(e,t){var n,i=[],r=[],a=X[e+" "];if(!a){for(t||(t=C(e)),n=t.length;n--;)a=g(t[n]),a[O]?i.push(a):r.push(a);a=X(e,b(r,i)),a.selector=e}return a},E=t.select=function(e,t,n,i){var r,a,o,s,c,l="function"==typeof e&&e,d=!i&&C(e=l.selector||e);if(n=n||[],1===d.length){if(a=d[0]=d[0].slice(0),a.length>2&&"ID"===(o=a[0]).type&&w.getById&&9===t.nodeType&&M&&k.relative[a[1].type]){if(t=(k.find.ID(o.matches[0].replace(xe,we),t)||[])[0],!t)return n;l&&(t=t.parentNode),e=e.slice(a.shift().value.length)}for(r=fe.needsContext.test(e)?0:a.length;r--&&(o=a[r],!k.relative[s=o.type]);)if((c=k.find[s])&&(i=c(o.matches[0].replace(xe,we),ge.test(a[0].type)&&u(t.parentNode)||t))){if(a.splice(r,1),e=i.length&&p(a),!e)return K.apply(n,i),n;break}}return(l||A(e,d))(i,t,!M,n,!t||ge.test(e)&&u(t.parentNode)||t),n},w.sortStable=O.split("").sort(J).join("")===O,w.detectDuplicates=!!j,D(),w.sortDetached=r(function(e){return 1&e.compareDocumentPosition(L.createElement("div"))}),r(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||a("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),w.attributes&&r(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||a("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),r(function(e){return null==e.getAttribute("disabled")})||a(te,function(e,t,n){var i;if(!n)return e[t]===!0?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),t}(e);fe.find=ge,fe.expr=ge.selectors,fe.expr[":"]=fe.expr.pseudos,fe.uniqueSort=fe.unique=ge.uniqueSort,fe.text=ge.getText,fe.isXMLDoc=ge.isXML,fe.contains=ge.contains;var be=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&fe(e).is(n))break;i.push(e)}return i},xe=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},we=fe.expr.match.needsContext,ke=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,Te=/^.[^:#\[\.,]*$/;fe.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?fe.find.matchesSelector(i,e)?[i]:[]:fe.find.matches(e,fe.grep(t,function(e){return 1===e.nodeType}))},fe.fn.extend({find:function(e){var t,n=[],i=this,r=i.length;if("string"!=typeof e)return this.pushStack(fe(e).filter(function(){for(t=0;t<r;t++)if(fe.contains(i[t],this))return!0}));for(t=0;t<r;t++)fe.find(e,i[t],n);return n=this.pushStack(r>1?fe.unique(n):n),n.selector=this.selector?this.selector+" "+e:e,n},filter:function(e){return this.pushStack(i(this,e||[],!1))},not:function(e){return this.pushStack(i(this,e||[],!0))},is:function(e){return!!i(this,"string"==typeof e&&we.test(e)?fe(e):e||[],!1).length}});var _e,Ce=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,Ae=fe.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||_e,"string"==typeof e){if(i="<"===e.charAt(0)&&">"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:Ce.exec(e),!i||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof fe?t[0]:t,fe.merge(this,fe.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:ie,!0)),ke.test(i[1])&&fe.isPlainObject(t))for(i in t)fe.isFunction(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}if(r=ie.getElementById(i[2]),r&&r.parentNode){if(r.id!==i[2])return _e.find(e);this.length=1,this[0]=r}return this.context=ie,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):fe.isFunction(e)?"undefined"!=typeof n.ready?n.ready(e):e(fe):(void 0!==e.selector&&(this.selector=e.selector,this.context=e.context),fe.makeArray(e,this))};Ae.prototype=fe.fn,_e=fe(ie);var Ee=/^(?:parents|prev(?:Until|All))/,Se={children:!0,contents:!0,next:!0,prev:!0};fe.fn.extend({has:function(e){var t,n=fe(e,this),i=n.length;return this.filter(function(){for(t=0;t<i;t++)if(fe.contains(this,n[t]))return!0})},closest:function(e,t){for(var n,i=0,r=this.length,a=[],o=we.test(e)||"string"!=typeof e?fe(e,t||this.context):0;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(o?o.index(n)>-1:1===n.nodeType&&fe.find.matchesSelector(n,e))){a.push(n);break}return this.pushStack(a.length>1?fe.uniqueSort(a):a)},index:function(e){return e?"string"==typeof e?fe.inArray(this[0],fe(e)):fe.inArray(e.jquery?e[0]:e,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(fe.uniqueSort(fe.merge(this.get(),fe(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),fe.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return be(e,"parentNode")},parentsUntil:function(e,t,n){return be(e,"parentNode",n)},next:function(e){return r(e,"nextSibling")},prev:function(e){return r(e,"previousSibling")},nextAll:function(e){return be(e,"nextSibling")},prevAll:function(e){return be(e,"previousSibling")},nextUntil:function(e,t,n){return be(e,"nextSibling",n)},prevUntil:function(e,t,n){return be(e,"previousSibling",n)},siblings:function(e){return xe((e.parentNode||{}).firstChild,e)},children:function(e){return xe(e.firstChild)},contents:function(e){return fe.nodeName(e,"iframe")?e.contentDocument||e.contentWindow.document:fe.merge([],e.childNodes)}},function(e,t){fe.fn[e]=function(n,i){var r=fe.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=fe.filter(i,r)),this.length>1&&(Se[e]||(r=fe.uniqueSort(r)),Ee.test(e)&&(r=r.reverse())),this.pushStack(r)}});var Ne=/\S+/g;fe.Callbacks=function(e){e="string"==typeof e?a(e):fe.extend({},e);var t,n,i,r,o=[],s=[],c=-1,l=function(){for(r=e.once,i=t=!0;s.length;c=-1)for(n=s.shift();++c<o.length;)o[c].apply(n[0],n[1])===!1&&e.stopOnFalse&&(c=o.length,n=!1);e.memory||(n=!1),t=!1,r&&(o=n?[]:"")},u={add:function(){return o&&(n&&!t&&(c=o.length-1,s.push(n)),function t(n){fe.each(n,function(n,i){fe.isFunction(i)?e.unique&&u.has(i)||o.push(i):i&&i.length&&"string"!==fe.type(i)&&t(i)})}(arguments),n&&!t&&l()),this},remove:function(){return fe.each(arguments,function(e,t){for(var n;(n=fe.inArray(t,o,n))>-1;)o.splice(n,1),n<=c&&c--}),this},has:function(e){return e?fe.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=!0,n||u.disable(),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=n||[],n=[e,n.slice?n.slice():n],s.push(n),t||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},fe.extend({Deferred:function(e){var t=[["resolve","done",fe.Callbacks("once memory"),"resolved"],["reject","fail",fe.Callbacks("once memory"),"rejected"],["notify","progress",fe.Callbacks("memory")]],n="pending",i={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},then:function(){var e=arguments;return fe.Deferred(function(n){fe.each(t,function(t,a){var o=fe.isFunction(e[t])&&e[t];r[a[1]](function(){var e=o&&o.apply(this,arguments);e&&fe.isFunction(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[a[0]+"With"](this===i?n.promise():this,o?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?fe.extend(e,i):i}},r={};return i.pipe=i.then,fe.each(t,function(e,a){var o=a[2],s=a[3];i[a[1]]=o.add,s&&o.add(function(){n=s},t[1^e][2].disable,t[2][2].lock),r[a[0]]=function(){return r[a[0]+"With"](this===r?i:this,arguments),this},r[a[0]+"With"]=o.fireWith}),i.promise(r),e&&e.call(r,r),r},when:function(e){var t,n,i,r=0,a=re.call(arguments),o=a.length,s=1!==o||e&&fe.isFunction(e.promise)?o:0,c=1===s?e:fe.Deferred(),l=function(e,n,i){return function(r){n[e]=this,i[e]=arguments.length>1?re.call(arguments):r,i===t?c.notifyWith(n,i):--s||c.resolveWith(n,i)}};if(o>1)for(t=new Array(o),n=new Array(o),i=new Array(o);r<o;r++)a[r]&&fe.isFunction(a[r].promise)?a[r].promise().progress(l(r,n,t)).done(l(r,i,a)).fail(c.reject):--s;return s||c.resolveWith(i,a),c.promise()}});var je;fe.fn.ready=function(e){return fe.ready.promise().done(e),this},fe.extend({isReady:!1,readyWait:1,holdReady:function(e){e?fe.readyWait++:fe.ready(!0)},ready:function(e){(e===!0?--fe.readyWait:fe.isReady)||(fe.isReady=!0,e!==!0&&--fe.readyWait>0||(je.resolveWith(ie,[fe]),fe.fn.triggerHandler&&(fe(ie).triggerHandler("ready"),fe(ie).off("ready"))))}}),fe.ready.promise=function(t){if(!je)if(je=fe.Deferred(),"complete"===ie.readyState||"loading"!==ie.readyState&&!ie.documentElement.doScroll)e.setTimeout(fe.ready);else if(ie.addEventListener)ie.addEventListener("DOMContentLoaded",s),e.addEventListener("load",s);else{ie.attachEvent("onreadystatechange",s),e.attachEvent("onload",s);var n=!1;try{n=null==e.frameElement&&ie.documentElement}catch(e){}n&&n.doScroll&&!function t(){if(!fe.isReady){try{n.doScroll("left")}catch(n){return e.setTimeout(t,50)}o(),fe.ready()}}()}return je.promise(t)},fe.ready.promise();var De;for(De in fe(de))break;de.ownFirst="0"===De,de.inlineBlockNeedsLayout=!1,fe(function(){var e,t,n,i;n=ie.getElementsByTagName("body")[0],n&&n.style&&(t=ie.createElement("div"),i=ie.createElement("div"),i.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(i).appendChild(t),"undefined"!=typeof t.style.zoom&&(t.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",de.inlineBlockNeedsLayout=e=3===t.offsetWidth,e&&(n.style.zoom=1)),n.removeChild(i))}),function(){var e=ie.createElement("div");de.deleteExpando=!0;try{delete e.test}catch(e){de.deleteExpando=!1}e=null}();var Le=function(e){var t=fe.noData[(e.nodeName+" ").toLowerCase()],n=+e.nodeType||1;return(1===n||9===n)&&(!t||t!==!0&&e.getAttribute("classid")===t)},qe=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Me=/([A-Z])/g;fe.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(e){return e=e.nodeType?fe.cache[e[fe.expando]]:e[fe.expando],!!e&&!l(e)},data:function(e,t,n){return u(e,t,n)},removeData:function(e,t){return d(e,t)},_data:function(e,t,n){return u(e,t,n,!0)},_removeData:function(e,t){return d(e,t,!0)}}),fe.fn.extend({data:function(e,t){var n,i,r,a=this[0],o=a&&a.attributes;if(void 0===e){if(this.length&&(r=fe.data(a),1===a.nodeType&&!fe._data(a,"parsedAttrs"))){for(n=o.length;n--;)o[n]&&(i=o[n].name,0===i.indexOf("data-")&&(i=fe.camelCase(i.slice(5)),c(a,i,r[i])));fe._data(a,"parsedAttrs",!0)}return r}return"object"==typeof e?this.each(function(){fe.data(this,e)}):arguments.length>1?this.each(function(){fe.data(this,e,t)}):a?c(a,e,fe.data(a,e)):void 0},removeData:function(e){return this.each(function(){fe.removeData(this,e)})}}),fe.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=fe._data(e,t),n&&(!i||fe.isArray(n)?i=fe._data(e,t,fe.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=fe.queue(e,t),i=n.length,r=n.shift(),a=fe._queueHooks(e,t),o=function(){fe.dequeue(e,t)};"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete a.stop,r.call(e,o,a)),!i&&a&&a.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return fe._data(e,n)||fe._data(e,n,{empty:fe.Callbacks("once memory").add(function(){fe._removeData(e,t+"queue"),fe._removeData(e,n)})})}}),fe.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?fe.queue(this[0],e):void 0===t?this:this.each(function(){var n=fe.queue(this,e,t);fe._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&fe.dequeue(this,e)})},dequeue:function(e){return this.each(function(){fe.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=fe.Deferred(),a=this,o=this.length,s=function(){--i||r.resolveWith(a,[a])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)n=fe._data(a[o],e+"queueHooks"),n&&n.empty&&(i++,n.empty.add(s));return s(),r.promise(t)}}),function(){var e;de.shrinkWrapBlocks=function(){if(null!=e)return e;e=!1;var t,n,i;return n=ie.getElementsByTagName("body")[0],n&&n.style?(t=ie.createElement("div"),i=ie.createElement("div"),i.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",n.appendChild(i).appendChild(t),"undefined"!=typeof t.style.zoom&&(t.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",t.appendChild(ie.createElement("div")).style.width="5px",e=3!==t.offsetWidth),n.removeChild(i),e):void 0}}();var Fe=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,He=new RegExp("^(?:([+-])=|)("+Fe+")([a-z%]*)$","i"),Pe=["Top","Right","Bottom","Left"],Re=function(e,t){return e=t||e,"none"===fe.css(e,"display")||!fe.contains(e.ownerDocument,e)},Oe=function(e,t,n,i,r,a,o){var s=0,c=e.length,l=null==n;if("object"===fe.type(n)){r=!0;for(s in n)Oe(e,t,s,n[s],!0,a,o)}else if(void 0!==i&&(r=!0,fe.isFunction(i)||(o=!0),l&&(o?(t.call(e,i),t=null):(l=t,t=function(e,t,n){return l.call(fe(e),n)})),t))for(;s<c;s++)t(e[s],n,o?i:i.call(e[s],s,t(e[s],n)));return r?e:l?t.call(e):c?t(e[0],n):a},ze=/^(?:checkbox|radio)$/i,Ie=/<([\w:-]+)/,Be=/^$|\/(?:java|ecma)script/i,We=/^\s+/,$e="abbr|article|aside|audio|bdi|canvas|data|datalist|details|dialog|figcaption|figure|footer|header|hgroup|main|mark|meter|nav|output|picture|progress|section|summary|template|time|video";!function(){var e=ie.createElement("div"),t=ie.createDocumentFragment(),n=ie.createElement("input");e.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",de.leadingWhitespace=3===e.firstChild.nodeType,de.tbody=!e.getElementsByTagName("tbody").length,de.htmlSerialize=!!e.getElementsByTagName("link").length,de.html5Clone="<:nav></:nav>"!==ie.createElement("nav").cloneNode(!0).outerHTML,n.type="checkbox",n.checked=!0,t.appendChild(n),de.appendChecked=n.checked,e.innerHTML="<textarea>x</textarea>",de.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue,t.appendChild(e),n=ie.createElement("input"),n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),de.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,de.noCloneEvent=!!e.addEventListener,e[fe.expando]=1,de.attributes=!e.getAttribute(fe.expando)}();var Xe={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:de.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]};Xe.optgroup=Xe.option,Xe.tbody=Xe.tfoot=Xe.colgroup=Xe.caption=Xe.thead,Xe.th=Xe.td;var Je=/<|&#?\w+;/,Ue=/<tbody/i;!function(){var t,n,i=ie.createElement("div");for(t in{submit:!0,change:!0,focusin:!0})n="on"+t,(de[t]=n in e)||(i.setAttribute(n,"t"),de[t]=i.attributes[n].expando===!1);i=null}();var Ve=/^(?:input|select|textarea)$/i,Ye=/^key/,Ge=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Qe=/^(?:focusinfocus|focusoutblur)$/,Ke=/^([^.]*)(?:\.(.+)|)/;fe.event={global:{},add:function(e,t,n,i,r){var a,o,s,c,l,u,d,p,f,h,v,m=fe._data(e);if(m){for(n.handler&&(c=n,n=c.handler,r=c.selector),n.guid||(n.guid=fe.guid++),(o=m.events)||(o=m.events={}),(u=m.handle)||(u=m.handle=function(e){return"undefined"==typeof fe||e&&fe.event.triggered===e.type?void 0:fe.event.dispatch.apply(u.elem,arguments)},u.elem=e),t=(t||"").match(Ne)||[""],s=t.length;s--;)a=Ke.exec(t[s])||[],f=v=a[1],h=(a[2]||"").split(".").sort(),f&&(l=fe.event.special[f]||{},f=(r?l.delegateType:l.bindType)||f,l=fe.event.special[f]||{},d=fe.extend({type:f,origType:v,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&fe.expr.match.needsContext.test(r),namespace:h.join(".")},c),(p=o[f])||(p=o[f]=[],p.delegateCount=0,l.setup&&l.setup.call(e,i,h,u)!==!1||(e.addEventListener?e.addEventListener(f,u,!1):e.attachEvent&&e.attachEvent("on"+f,u))),l.add&&(l.add.call(e,d),d.handler.guid||(d.handler.guid=n.guid)),r?p.splice(p.delegateCount++,0,d):p.push(d),fe.event.global[f]=!0);e=null}},remove:function(e,t,n,i,r){var a,o,s,c,l,u,d,p,f,h,v,m=fe.hasData(e)&&fe._data(e);if(m&&(u=m.events)){for(t=(t||"").match(Ne)||[""],l=t.length;l--;)if(s=Ke.exec(t[l])||[],f=v=s[1],h=(s[2]||"").split(".").sort(),f){for(d=fe.event.special[f]||{},f=(i?d.delegateType:d.bindType)||f,p=u[f]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),c=a=p.length;a--;)o=p[a],!r&&v!==o.origType||n&&n.guid!==o.guid||s&&!s.test(o.namespace)||i&&i!==o.selector&&("**"!==i||!o.selector)||(p.splice(a,1),o.selector&&p.delegateCount--,d.remove&&d.remove.call(e,o));c&&!p.length&&(d.teardown&&d.teardown.call(e,h,m.handle)!==!1||fe.removeEvent(e,f,m.handle),delete u[f])}else for(f in u)fe.event.remove(e,f+t[l],n,i,!0);fe.isEmptyObject(u)&&(delete m.handle,fe._removeData(e,"events"))}},trigger:function(t,n,i,r){var a,o,s,c,l,u,d,p=[i||ie],f=ue.call(t,"type")?t.type:t,h=ue.call(t,"namespace")?t.namespace.split("."):[];if(s=u=i=i||ie,3!==i.nodeType&&8!==i.nodeType&&!Qe.test(f+fe.event.triggered)&&(f.indexOf(".")>-1&&(h=f.split("."),f=h.shift(),h.sort()),o=f.indexOf(":")<0&&"on"+f,t=t[fe.expando]?t:new fe.Event(f,"object"==typeof t&&t),t.isTrigger=r?2:3,t.namespace=h.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:fe.makeArray(n,[t]),l=fe.event.special[f]||{},r||!l.trigger||l.trigger.apply(i,n)!==!1)){if(!r&&!l.noBubble&&!fe.isWindow(i)){for(c=l.delegateType||f,Qe.test(c+f)||(s=s.parentNode);s;s=s.parentNode)p.push(s),u=s;u===(i.ownerDocument||ie)&&p.push(u.defaultView||u.parentWindow||e)}for(d=0;(s=p[d++])&&!t.isPropagationStopped();)t.type=d>1?c:l.bindType||f,a=(fe._data(s,"events")||{})[t.type]&&fe._data(s,"handle"),a&&a.apply(s,n),a=o&&s[o],a&&a.apply&&Le(s)&&(t.result=a.apply(s,n),t.result===!1&&t.preventDefault());if(t.type=f,!r&&!t.isDefaultPrevented()&&(!l._default||l._default.apply(p.pop(),n)===!1)&&Le(i)&&o&&i[f]&&!fe.isWindow(i)){u=i[o],u&&(i[o]=null),fe.event.triggered=f;try{i[f]()}catch(e){}fe.event.triggered=void 0,u&&(i[o]=u)}return t.result}},dispatch:function(e){e=fe.event.fix(e);var t,n,i,r,a,o=[],s=re.call(arguments),c=(fe._data(this,"events")||{})[e.type]||[],l=fe.event.special[e.type]||{};if(s[0]=e,e.delegateTarget=this,!l.preDispatch||l.preDispatch.call(this,e)!==!1){for(o=fe.event.handlers.call(this,e,c),t=0;(r=o[t++])&&!e.isPropagationStopped();)for(e.currentTarget=r.elem,n=0;(a=r.handlers[n++])&&!e.isImmediatePropagationStopped();)e.rnamespace&&!e.rnamespace.test(a.namespace)||(e.handleObj=a,e.data=a.data,i=((fe.event.special[a.origType]||{}).handle||a.handler).apply(r.elem,s),void 0!==i&&(e.result=i)===!1&&(e.preventDefault(),e.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,i,r,a,o=[],s=t.delegateCount,c=e.target;if(s&&c.nodeType&&("click"!==e.type||isNaN(e.button)||e.button<1))for(;c!=this;c=c.parentNode||this)if(1===c.nodeType&&(c.disabled!==!0||"click"!==e.type)){for(i=[],n=0;n<s;n++)a=t[n],r=a.selector+" ",void 0===i[r]&&(i[r]=a.needsContext?fe(r,this).index(c)>-1:fe.find(r,this,null,[c]).length),i[r]&&i.push(a);i.length&&o.push({elem:c,handlers:i})}return s<t.length&&o.push({elem:this,handlers:t.slice(s)}),o},fix:function(e){if(e[fe.expando])return e;var t,n,i,r=e.type,a=e,o=this.fixHooks[r];for(o||(this.fixHooks[r]=o=Ge.test(r)?this.mouseHooks:Ye.test(r)?this.keyHooks:{}),i=o.props?this.props.concat(o.props):this.props,e=new fe.Event(a),t=i.length;t--;)n=i[t],e[n]=a[n];return e.target||(e.target=a.srcElement||ie),3===e.target.nodeType&&(e.target=e.target.parentNode),e.metaKey=!!e.metaKey,o.filter?o.filter(e,a):e},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(e,t){var n,i,r,a=t.button,o=t.fromElement;return null==e.pageX&&null!=t.clientX&&(i=e.target.ownerDocument||ie,r=i.documentElement,n=i.body,e.pageX=t.clientX+(r&&r.scrollLeft||n&&n.scrollLeft||0)-(r&&r.clientLeft||n&&n.clientLeft||0),e.pageY=t.clientY+(r&&r.scrollTop||n&&n.scrollTop||0)-(r&&r.clientTop||n&&n.clientTop||0)),!e.relatedTarget&&o&&(e.relatedTarget=o===e.target?t.toElement:o),e.which||void 0===a||(e.which=1&a?1:2&a?3:4&a?2:0),e}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==x()&&this.focus)try{return this.focus(),!1}catch(e){}},delegateType:"focusin"},blur:{trigger:function(){if(this===x()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if(fe.nodeName(this,"input")&&"checkbox"===this.type&&this.click)return this.click(),!1},_default:function(e){return fe.nodeName(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n){var i=fe.extend(new fe.Event,n,{type:e,isSimulated:!0});fe.event.trigger(i,null,t),i.isDefaultPrevented()&&n.preventDefault()}},fe.removeEvent=ie.removeEventListener?function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)}:function(e,t,n){var i="on"+t;e.detachEvent&&("undefined"==typeof e[i]&&(e[i]=null),e.detachEvent(i,n))},fe.Event=function(e,t){return this instanceof fe.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?g:b):this.type=e,t&&fe.extend(this,t),this.timeStamp=e&&e.timeStamp||fe.now(),void(this[fe.expando]=!0)):new fe.Event(e,t)},fe.Event.prototype={constructor:fe.Event,isDefaultPrevented:b,isPropagationStopped:b,isImmediatePropagationStopped:b,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=g,e&&(e.preventDefault?e.preventDefault():e.returnValue=!1)},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=g,e&&!this.isSimulated&&(e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0)},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=g,e&&e.stopImmediatePropagation&&e.stopImmediatePropagation(),this.stopPropagation()}},fe.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){fe.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,r=e.relatedTarget,a=e.handleObj;return r&&(r===i||fe.contains(i,r))||(e.type=a.origType,n=a.handler.apply(this,arguments),e.type=t),n}}}),de.submit||(fe.event.special.submit={setup:function(){return!fe.nodeName(this,"form")&&void fe.event.add(this,"click._submit keypress._submit",function(e){var t=e.target,n=fe.nodeName(t,"input")||fe.nodeName(t,"button")?fe.prop(t,"form"):void 0;n&&!fe._data(n,"submit")&&(fe.event.add(n,"submit._submit",function(e){e._submitBubble=!0}),fe._data(n,"submit",!0))})},postDispatch:function(e){e._submitBubble&&(delete e._submitBubble,this.parentNode&&!e.isTrigger&&fe.event.simulate("submit",this.parentNode,e))},teardown:function(){return!fe.nodeName(this,"form")&&void fe.event.remove(this,"._submit")}}),de.change||(fe.event.special.change={setup:function(){return Ve.test(this.nodeName)?("checkbox"!==this.type&&"radio"!==this.type||(fe.event.add(this,"propertychange._change",function(e){"checked"===e.originalEvent.propertyName&&(this._justChanged=!0)}),fe.event.add(this,"click._change",function(e){this._justChanged&&!e.isTrigger&&(this._justChanged=!1),fe.event.simulate("change",this,e)})),!1):void fe.event.add(this,"beforeactivate._change",function(e){var t=e.target;Ve.test(t.nodeName)&&!fe._data(t,"change")&&(fe.event.add(t,"change._change",function(e){!this.parentNode||e.isSimulated||e.isTrigger||fe.event.simulate("change",this.parentNode,e)}),fe._data(t,"change",!0))})},handle:function(e){var t=e.target;if(this!==t||e.isSimulated||e.isTrigger||"radio"!==t.type&&"checkbox"!==t.type)return e.handleObj.handler.apply(this,arguments)},teardown:function(){return fe.event.remove(this,"._change"),!Ve.test(this.nodeName)}}),de.focusin||fe.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){fe.event.simulate(t,e.target,fe.event.fix(e))};fe.event.special[t]={setup:function(){var i=this.ownerDocument||this,r=fe._data(i,t);r||i.addEventListener(e,n,!0),fe._data(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=fe._data(i,t)-1;r?fe._data(i,t,r):(i.removeEventListener(e,n,!0),fe._removeData(i,t))}}}),fe.fn.extend({on:function(e,t,n,i){return w(this,e,t,n,i)},one:function(e,t,n,i){return w(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,fe(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return t!==!1&&"function"!=typeof t||(n=t,t=void 0),n===!1&&(n=b),this.each(function(){fe.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){fe.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return fe.event.trigger(e,t,n,!0)}});var Ze=/ jQuery\d+="(?:null|\d+)"/g,et=new RegExp("<(?:"+$e+")[\\s/>]","i"),tt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,nt=/<script|<style|<link/i,it=/checked\s*(?:[^=]|=\s*.checked.)/i,rt=/^true\/(.*)/,at=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,ot=f(ie),st=ot.appendChild(ie.createElement("div"));fe.extend({htmlPrefilter:function(e){return e.replace(tt,"<$1></$2>")},clone:function(e,t,n){var i,r,a,o,s,c=fe.contains(e.ownerDocument,e);if(de.html5Clone||fe.isXMLDoc(e)||!et.test("<"+e.nodeName+">")?a=e.cloneNode(!0):(st.innerHTML=e.outerHTML,st.removeChild(a=st.firstChild)),!(de.noCloneEvent&&de.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||fe.isXMLDoc(e)))for(i=h(a),s=h(e),o=0;null!=(r=s[o]);++o)i[o]&&A(r,i[o]);if(t)if(n)for(s=s||h(e),i=i||h(a),o=0;null!=(r=s[o]);o++)C(r,i[o]);else C(e,a);return i=h(a,"script"),i.length>0&&v(i,!c&&h(e,"script")),i=s=r=null,a},cleanData:function(e,t){for(var n,i,r,a,o=0,s=fe.expando,c=fe.cache,l=de.attributes,u=fe.event.special;null!=(n=e[o]);o++)if((t||Le(n))&&(r=n[s],a=r&&c[r])){if(a.events)for(i in a.events)u[i]?fe.event.remove(n,i):fe.removeEvent(n,i,a.handle);c[r]&&(delete c[r],l||"undefined"==typeof n.removeAttribute?n[s]=void 0:n.removeAttribute(s),ne.push(r))}}}),fe.fn.extend({domManip:E,detach:function(e){return S(this,e,!0)},remove:function(e){return S(this,e)},text:function(e){return Oe(this,function(e){return void 0===e?fe.text(this):this.empty().append((this[0]&&this[0].ownerDocument||ie).createTextNode(e))},null,e,arguments.length)},append:function(){return E(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=k(this,e);t.appendChild(e)}})},prepend:function(){return E(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=k(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return E(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return E(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++){for(1===e.nodeType&&fe.cleanData(h(e,!1));e.firstChild;)e.removeChild(e.firstChild);e.options&&fe.nodeName(e,"select")&&(e.options.length=0)}return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return fe.clone(this,e,t)})},html:function(e){return Oe(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e)return 1===t.nodeType?t.innerHTML.replace(Ze,""):void 0;if("string"==typeof e&&!nt.test(e)&&(de.htmlSerialize||!et.test(e))&&(de.leadingWhitespace||!We.test(e))&&!Xe[(Ie.exec(e)||["",""])[1].toLowerCase()]){e=fe.htmlPrefilter(e);try{for(;n<i;n++)t=this[n]||{},
1===t.nodeType&&(fe.cleanData(h(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return E(this,arguments,function(t){var n=this.parentNode;fe.inArray(this,e)<0&&(fe.cleanData(h(this)),n&&n.replaceChild(t,this))},e)}}),fe.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){fe.fn[e]=function(e){for(var n,i=0,r=[],a=fe(e),o=a.length-1;i<=o;i++)n=i===o?this:this.clone(!0),fe(a[i])[t](n),oe.apply(r,n.get());return this.pushStack(r)}});var ct,lt={HTML:"block",BODY:"block"},ut=/^margin/,dt=new RegExp("^("+Fe+")(?!px)[a-z%]+$","i"),pt=function(e,t,n,i){var r,a,o={};for(a in t)o[a]=e.style[a],e.style[a]=t[a];r=n.apply(e,i||[]);for(a in t)e.style[a]=o[a];return r},ft=ie.documentElement;!function(){function t(){var t,u,d=ie.documentElement;d.appendChild(c),l.style.cssText="-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",n=r=s=!1,i=o=!0,e.getComputedStyle&&(u=e.getComputedStyle(l),n="1%"!==(u||{}).top,s="2px"===(u||{}).marginLeft,r="4px"===(u||{width:"4px"}).width,l.style.marginRight="50%",i="4px"===(u||{marginRight:"4px"}).marginRight,t=l.appendChild(ie.createElement("div")),t.style.cssText=l.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",t.style.marginRight=t.style.width="0",l.style.width="1px",o=!parseFloat((e.getComputedStyle(t)||{}).marginRight),l.removeChild(t)),l.style.display="none",a=0===l.getClientRects().length,a&&(l.style.display="",l.innerHTML="<table><tr><td></td><td>t</td></tr></table>",l.childNodes[0].style.borderCollapse="separate",t=l.getElementsByTagName("td"),t[0].style.cssText="margin:0;border:0;padding:0;display:none",a=0===t[0].offsetHeight,a&&(t[0].style.display="",t[1].style.display="none",a=0===t[0].offsetHeight)),d.removeChild(c)}var n,i,r,a,o,s,c=ie.createElement("div"),l=ie.createElement("div");l.style&&(l.style.cssText="float:left;opacity:.5",de.opacity="0.5"===l.style.opacity,de.cssFloat=!!l.style.cssFloat,l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",de.clearCloneStyle="content-box"===l.style.backgroundClip,c=ie.createElement("div"),c.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",l.innerHTML="",c.appendChild(l),de.boxSizing=""===l.style.boxSizing||""===l.style.MozBoxSizing||""===l.style.WebkitBoxSizing,fe.extend(de,{reliableHiddenOffsets:function(){return null==n&&t(),a},boxSizingReliable:function(){return null==n&&t(),r},pixelMarginRight:function(){return null==n&&t(),i},pixelPosition:function(){return null==n&&t(),n},reliableMarginRight:function(){return null==n&&t(),o},reliableMarginLeft:function(){return null==n&&t(),s}}))}();var ht,vt,mt=/^(top|right|bottom|left)$/;e.getComputedStyle?(ht=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},vt=function(e,t,n){var i,r,a,o,s=e.style;return n=n||ht(e),o=n?n.getPropertyValue(t)||n[t]:void 0,""!==o&&void 0!==o||fe.contains(e.ownerDocument,e)||(o=fe.style(e,t)),n&&!de.pixelMarginRight()&&dt.test(o)&&ut.test(t)&&(i=s.width,r=s.minWidth,a=s.maxWidth,s.minWidth=s.maxWidth=s.width=o,o=n.width,s.width=i,s.minWidth=r,s.maxWidth=a),void 0===o?o:o+""}):ft.currentStyle&&(ht=function(e){return e.currentStyle},vt=function(e,t,n){var i,r,a,o,s=e.style;return n=n||ht(e),o=n?n[t]:void 0,null==o&&s&&s[t]&&(o=s[t]),dt.test(o)&&!mt.test(t)&&(i=s.left,r=e.runtimeStyle,a=r&&r.left,a&&(r.left=e.currentStyle.left),s.left="fontSize"===t?"1em":o,o=s.pixelLeft+"px",s.left=i,a&&(r.left=a)),void 0===o?o:o+""||"auto"});var yt=/alpha\([^)]*\)/i,gt=/opacity\s*=\s*([^)]*)/i,bt=/^(none|table(?!-c[ea]).+)/,xt=new RegExp("^("+Fe+")(.*)$","i"),wt={position:"absolute",visibility:"hidden",display:"block"},kt={letterSpacing:"0",fontWeight:"400"},Tt=["Webkit","O","Moz","ms"],_t=ie.createElement("div").style;fe.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=vt(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:de.cssFloat?"cssFloat":"styleFloat"},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,a,o,s=fe.camelCase(t),c=e.style;if(t=fe.cssProps[s]||(fe.cssProps[s]=L(s)||s),o=fe.cssHooks[t]||fe.cssHooks[s],void 0===n)return o&&"get"in o&&void 0!==(r=o.get(e,!1,i))?r:c[t];if(a=typeof n,"string"===a&&(r=He.exec(n))&&r[1]&&(n=p(e,t,r),a="number"),null!=n&&n===n&&("number"===a&&(n+=r&&r[3]||(fe.cssNumber[s]?"":"px")),de.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),!(o&&"set"in o&&void 0===(n=o.set(e,n,i)))))try{c[t]=n}catch(e){}}},css:function(e,t,n,i){var r,a,o,s=fe.camelCase(t);return t=fe.cssProps[s]||(fe.cssProps[s]=L(s)||s),o=fe.cssHooks[t]||fe.cssHooks[s],o&&"get"in o&&(a=o.get(e,!0,n)),void 0===a&&(a=vt(e,t,i)),"normal"===a&&t in kt&&(a=kt[t]),""===n||n?(r=parseFloat(a),n===!0||isFinite(r)?r||0:a):a}}),fe.each(["height","width"],function(e,t){fe.cssHooks[t]={get:function(e,n,i){if(n)return bt.test(fe.css(e,"display"))&&0===e.offsetWidth?pt(e,wt,function(){return H(e,t,i)}):H(e,t,i)},set:function(e,n,i){var r=i&&ht(e);return M(e,n,i?F(e,t,i,de.boxSizing&&"border-box"===fe.css(e,"boxSizing",!1,r),r):0)}}}),de.opacity||(fe.cssHooks.opacity={get:function(e,t){return gt.test((t&&e.currentStyle?e.currentStyle.filter:e.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(e,t){var n=e.style,i=e.currentStyle,r=fe.isNumeric(t)?"alpha(opacity="+100*t+")":"",a=i&&i.filter||n.filter||"";n.zoom=1,(t>=1||""===t)&&""===fe.trim(a.replace(yt,""))&&n.removeAttribute&&(n.removeAttribute("filter"),""===t||i&&!i.filter)||(n.filter=yt.test(a)?a.replace(yt,r):a+" "+r)}}),fe.cssHooks.marginRight=D(de.reliableMarginRight,function(e,t){if(t)return pt(e,{display:"inline-block"},vt,[e,"marginRight"])}),fe.cssHooks.marginLeft=D(de.reliableMarginLeft,function(e,t){if(t)return(parseFloat(vt(e,"marginLeft"))||(fe.contains(e.ownerDocument,e)?e.getBoundingClientRect().left-pt(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}):0))+"px"}),fe.each({margin:"",padding:"",border:"Width"},function(e,t){fe.cssHooks[e+t]={expand:function(n){for(var i=0,r={},a="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+Pe[i]+t]=a[i]||a[i-2]||a[0];return r}},ut.test(e)||(fe.cssHooks[e+t].set=M)}),fe.fn.extend({css:function(e,t){return Oe(this,function(e,t,n){var i,r,a={},o=0;if(fe.isArray(t)){for(i=ht(e),r=t.length;o<r;o++)a[t[o]]=fe.css(e,t[o],!1,i);return a}return void 0!==n?fe.style(e,t,n):fe.css(e,t)},e,t,arguments.length>1)},show:function(){return q(this,!0)},hide:function(){return q(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Re(this)?fe(this).show():fe(this).hide()})}}),fe.Tween=P,P.prototype={constructor:P,init:function(e,t,n,i,r,a){this.elem=e,this.prop=n,this.easing=r||fe.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=a||(fe.cssNumber[n]?"":"px")},cur:function(){var e=P.propHooks[this.prop];return e&&e.get?e.get(this):P.propHooks._default.get(this)},run:function(e){var t,n=P.propHooks[this.prop];return this.options.duration?this.pos=t=fe.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):P.propHooks._default.set(this),this}},P.prototype.init.prototype=P.prototype,P.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=fe.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){fe.fx.step[e.prop]?fe.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[fe.cssProps[e.prop]]&&!fe.cssHooks[e.prop]?e.elem[e.prop]=e.now:fe.style(e.elem,e.prop,e.now+e.unit)}}},P.propHooks.scrollTop=P.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},fe.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},fe.fx=P.prototype.init,fe.fx.step={};var Ct,At,Et=/^(?:toggle|show|hide)$/,St=/queueHooks$/;fe.Animation=fe.extend(W,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return p(n.elem,e,He.exec(t),n),n}]},tweener:function(e,t){fe.isFunction(e)?(t=e,e=["*"]):e=e.match(Ne);for(var n,i=0,r=e.length;i<r;i++)n=e[i],W.tweeners[n]=W.tweeners[n]||[],W.tweeners[n].unshift(t)},prefilters:[I],prefilter:function(e,t){t?W.prefilters.unshift(e):W.prefilters.push(e)}}),fe.speed=function(e,t,n){var i=e&&"object"==typeof e?fe.extend({},e):{complete:n||!n&&t||fe.isFunction(e)&&e,duration:e,easing:n&&t||t&&!fe.isFunction(t)&&t};return i.duration=fe.fx.off?0:"number"==typeof i.duration?i.duration:i.duration in fe.fx.speeds?fe.fx.speeds[i.duration]:fe.fx.speeds._default,null!=i.queue&&i.queue!==!0||(i.queue="fx"),i.old=i.complete,i.complete=function(){fe.isFunction(i.old)&&i.old.call(this),i.queue&&fe.dequeue(this,i.queue)},i},fe.fn.extend({fadeTo:function(e,t,n,i){return this.filter(Re).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=fe.isEmptyObject(e),a=fe.speed(t,n,i),o=function(){var t=W(this,fe.extend({},e),a);(r||fe._data(this,"finish"))&&t.stop(!0)};return o.finish=o,r||a.queue===!1?this.each(o):this.queue(a.queue,o)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",a=fe.timers,o=fe._data(this);if(r)o[r]&&o[r].stop&&i(o[r]);else for(r in o)o[r]&&o[r].stop&&St.test(r)&&i(o[r]);for(r=a.length;r--;)a[r].elem!==this||null!=e&&a[r].queue!==e||(a[r].anim.stop(n),t=!1,a.splice(r,1));!t&&n||fe.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,n=fe._data(this),i=n[e+"queue"],r=n[e+"queueHooks"],a=fe.timers,o=i?i.length:0;for(n.finish=!0,fe.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=a.length;t--;)a[t].elem===this&&a[t].queue===e&&(a[t].anim.stop(!0),a.splice(t,1));for(t=0;t<o;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),fe.each(["toggle","show","hide"],function(e,t){var n=fe.fn[t];fe.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(O(t,!0),e,i,r)}}),fe.each({slideDown:O("show"),slideUp:O("hide"),slideToggle:O("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){fe.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),fe.timers=[],fe.fx.tick=function(){var e,t=fe.timers,n=0;for(Ct=fe.now();n<t.length;n++)e=t[n],e()||t[n]!==e||t.splice(n--,1);t.length||fe.fx.stop(),Ct=void 0},fe.fx.timer=function(e){fe.timers.push(e),e()?fe.fx.start():fe.timers.pop()},fe.fx.interval=13,fe.fx.start=function(){At||(At=e.setInterval(fe.fx.tick,fe.fx.interval))},fe.fx.stop=function(){e.clearInterval(At),At=null},fe.fx.speeds={slow:600,fast:200,_default:400},fe.fn.delay=function(t,n){return t=fe.fx?fe.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,i){var r=e.setTimeout(n,t);i.stop=function(){e.clearTimeout(r)}})},function(){var e,t=ie.createElement("input"),n=ie.createElement("div"),i=ie.createElement("select"),r=i.appendChild(ie.createElement("option"));n=ie.createElement("div"),n.setAttribute("className","t"),n.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",e=n.getElementsByTagName("a")[0],t.setAttribute("type","checkbox"),n.appendChild(t),e=n.getElementsByTagName("a")[0],e.style.cssText="top:1px",de.getSetAttribute="t"!==n.className,de.style=/top/.test(e.getAttribute("style")),de.hrefNormalized="/a"===e.getAttribute("href"),de.checkOn=!!t.value,de.optSelected=r.selected,de.enctype=!!ie.createElement("form").enctype,i.disabled=!0,de.optDisabled=!r.disabled,t=ie.createElement("input"),t.setAttribute("value",""),de.input=""===t.getAttribute("value"),t.value="t",t.setAttribute("type","radio"),de.radioValue="t"===t.value}();var Nt=/\r/g,jt=/[\x20\t\r\n\f]+/g;fe.fn.extend({val:function(e){var t,n,i,r=this[0];{if(arguments.length)return i=fe.isFunction(e),this.each(function(n){var r;1===this.nodeType&&(r=i?e.call(this,n,fe(this).val()):e,null==r?r="":"number"==typeof r?r+="":fe.isArray(r)&&(r=fe.map(r,function(e){return null==e?"":e+""})),t=fe.valHooks[this.type]||fe.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))});if(r)return t=fe.valHooks[r.type]||fe.valHooks[r.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:(n=r.value,"string"==typeof n?n.replace(Nt,""):null==n?"":n)}}}),fe.extend({valHooks:{option:{get:function(e){var t=fe.find.attr(e,"value");return null!=t?t:fe.trim(fe.text(e)).replace(jt," ")}},select:{get:function(e){for(var t,n,i=e.options,r=e.selectedIndex,a="select-one"===e.type||r<0,o=a?null:[],s=a?r+1:i.length,c=r<0?s:a?r:0;c<s;c++)if(n=i[c],(n.selected||c===r)&&(de.optDisabled?!n.disabled:null===n.getAttribute("disabled"))&&(!n.parentNode.disabled||!fe.nodeName(n.parentNode,"optgroup"))){if(t=fe(n).val(),a)return t;o.push(t)}return o},set:function(e,t){for(var n,i,r=e.options,a=fe.makeArray(t),o=r.length;o--;)if(i=r[o],fe.inArray(fe.valHooks.option.get(i),a)>-1)try{i.selected=n=!0}catch(e){i.scrollHeight}else i.selected=!1;return n||(e.selectedIndex=-1),r}}}}),fe.each(["radio","checkbox"],function(){fe.valHooks[this]={set:function(e,t){if(fe.isArray(t))return e.checked=fe.inArray(fe(e).val(),t)>-1}},de.checkOn||(fe.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var Dt,Lt,qt=fe.expr.attrHandle,Mt=/^(?:checked|selected)$/i,Ft=de.getSetAttribute,Ht=de.input;fe.fn.extend({attr:function(e,t){return Oe(this,fe.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){fe.removeAttr(this,e)})}}),fe.extend({attr:function(e,t,n){var i,r,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return"undefined"==typeof e.getAttribute?fe.prop(e,t,n):(1===a&&fe.isXMLDoc(e)||(t=t.toLowerCase(),r=fe.attrHooks[t]||(fe.expr.match.bool.test(t)?Lt:Dt)),void 0!==n?null===n?void fe.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:(i=fe.find.attr(e,t),null==i?void 0:i))},attrHooks:{type:{set:function(e,t){if(!de.radioValue&&"radio"===t&&fe.nodeName(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i,r=0,a=t&&t.match(Ne);if(a&&1===e.nodeType)for(;n=a[r++];)i=fe.propFix[n]||n,fe.expr.match.bool.test(n)?Ht&&Ft||!Mt.test(n)?e[i]=!1:e[fe.camelCase("default-"+n)]=e[i]=!1:fe.attr(e,n,""),e.removeAttribute(Ft?n:i)}}),Lt={set:function(e,t,n){return t===!1?fe.removeAttr(e,n):Ht&&Ft||!Mt.test(n)?e.setAttribute(!Ft&&fe.propFix[n]||n,n):e[fe.camelCase("default-"+n)]=e[n]=!0,n}},fe.each(fe.expr.match.bool.source.match(/\w+/g),function(e,t){var n=qt[t]||fe.find.attr;Ht&&Ft||!Mt.test(t)?qt[t]=function(e,t,i){var r,a;return i||(a=qt[t],qt[t]=r,r=null!=n(e,t,i)?t.toLowerCase():null,qt[t]=a),r}:qt[t]=function(e,t,n){if(!n)return e[fe.camelCase("default-"+t)]?t.toLowerCase():null}}),Ht&&Ft||(fe.attrHooks.value={set:function(e,t,n){return fe.nodeName(e,"input")?void(e.defaultValue=t):Dt&&Dt.set(e,t,n)}}),Ft||(Dt={set:function(e,t,n){var i=e.getAttributeNode(n);if(i||e.setAttributeNode(i=e.ownerDocument.createAttribute(n)),i.value=t+="","value"===n||t===e.getAttribute(n))return t}},qt.id=qt.name=qt.coords=function(e,t,n){var i;if(!n)return(i=e.getAttributeNode(t))&&""!==i.value?i.value:null},fe.valHooks.button={get:function(e,t){var n=e.getAttributeNode(t);if(n&&n.specified)return n.value},set:Dt.set},fe.attrHooks.contenteditable={set:function(e,t,n){Dt.set(e,""!==t&&t,n)}},fe.each(["width","height"],function(e,t){fe.attrHooks[t]={set:function(e,n){if(""===n)return e.setAttribute(t,"auto"),n}}})),de.style||(fe.attrHooks.style={get:function(e){return e.style.cssText||void 0},set:function(e,t){return e.style.cssText=t+""}});var Pt=/^(?:input|select|textarea|button|object)$/i,Rt=/^(?:a|area)$/i;fe.fn.extend({prop:function(e,t){return Oe(this,fe.prop,e,t,arguments.length>1)},removeProp:function(e){return e=fe.propFix[e]||e,this.each(function(){try{this[e]=void 0,delete this[e]}catch(e){}})}}),fe.extend({prop:function(e,t,n){var i,r,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return 1===a&&fe.isXMLDoc(e)||(t=fe.propFix[t]||t,r=fe.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=fe.find.attr(e,"tabindex");return t?parseInt(t,10):Pt.test(e.nodeName)||Rt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),de.hrefNormalized||fe.each(["href","src"],function(e,t){fe.propHooks[t]={get:function(e){return e.getAttribute(t,4)}}}),de.optSelected||(fe.propHooks.selected={get:function(e){var t=e.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),fe.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){fe.propFix[this.toLowerCase()]=this}),de.enctype||(fe.propFix.enctype="encoding");var Ot=/[\t\r\n\f]/g;fe.fn.extend({addClass:function(e){var t,n,i,r,a,o,s,c=0;if(fe.isFunction(e))return this.each(function(t){fe(this).addClass(e.call(this,t,$(this)))});if("string"==typeof e&&e)for(t=e.match(Ne)||[];n=this[c++];)if(r=$(n),i=1===n.nodeType&&(" "+r+" ").replace(Ot," ")){for(o=0;a=t[o++];)i.indexOf(" "+a+" ")<0&&(i+=a+" ");s=fe.trim(i),r!==s&&fe.attr(n,"class",s)}return this},removeClass:function(e){var t,n,i,r,a,o,s,c=0;if(fe.isFunction(e))return this.each(function(t){fe(this).removeClass(e.call(this,t,$(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(Ne)||[];n=this[c++];)if(r=$(n),i=1===n.nodeType&&(" "+r+" ").replace(Ot," ")){for(o=0;a=t[o++];)for(;i.indexOf(" "+a+" ")>-1;)i=i.replace(" "+a+" "," ");s=fe.trim(i),r!==s&&fe.attr(n,"class",s)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):fe.isFunction(e)?this.each(function(n){fe(this).toggleClass(e.call(this,n,$(this),t),t)}):this.each(function(){var t,i,r,a;if("string"===n)for(i=0,r=fe(this),a=e.match(Ne)||[];t=a[i++];)r.hasClass(t)?r.removeClass(t):r.addClass(t);else void 0!==e&&"boolean"!==n||(t=$(this),t&&fe._data(this,"__className__",t),fe.attr(this,"class",t||e===!1?"":fe._data(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+$(n)+" ").replace(Ot," ").indexOf(t)>-1)return!0;return!1}}),fe.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(e,t){fe.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),fe.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}});var zt=e.location,It=fe.now(),Bt=/\?/,Wt=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;fe.parseJSON=function(t){if(e.JSON&&e.JSON.parse)return e.JSON.parse(t+"");var n,i=null,r=fe.trim(t+"");return r&&!fe.trim(r.replace(Wt,function(e,t,r,a){return n&&t&&(i=0),0===i?e:(n=r||t,i+=!a-!r,"")}))?Function("return "+r)():fe.error("Invalid JSON: "+t)},fe.parseXML=function(t){var n,i;if(!t||"string"!=typeof t)return null;try{e.DOMParser?(i=new e.DOMParser,n=i.parseFromString(t,"text/xml")):(n=new e.ActiveXObject("Microsoft.XMLDOM"),n.async="false",n.loadXML(t))}catch(e){n=void 0}return n&&n.documentElement&&!n.getElementsByTagName("parsererror").length||fe.error("Invalid XML: "+t),n};var $t=/#.*$/,Xt=/([?&])_=[^&]*/,Jt=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Ut=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Vt=/^(?:GET|HEAD)$/,Yt=/^\/\//,Gt=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Qt={},Kt={},Zt="*/".concat("*"),en=zt.href,tn=Gt.exec(en.toLowerCase())||[];fe.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:en,type:"GET",isLocal:Ut.test(tn[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Zt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":fe.parseJSON,"text xml":fe.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?U(U(e,fe.ajaxSettings),t):U(fe.ajaxSettings,e)},ajaxPrefilter:X(Qt),ajaxTransport:X(Kt),ajax:function(t,n){function i(t,n,i,r){var a,d,g,b,w,T=n;2!==x&&(x=2,c&&e.clearTimeout(c),u=void 0,s=r||"",k.readyState=t>0?4:0,a=t>=200&&t<300||304===t,i&&(b=V(p,k,i)),b=Y(p,b,k,a),a?(p.ifModified&&(w=k.getResponseHeader("Last-Modified"),w&&(fe.lastModified[o]=w),w=k.getResponseHeader("etag"),w&&(fe.etag[o]=w)),204===t||"HEAD"===p.type?T="nocontent":304===t?T="notmodified":(T=b.state,d=b.data,g=b.error,a=!g)):(g=T,!t&&T||(T="error",t<0&&(t=0))),k.status=t,k.statusText=(n||T)+"",a?v.resolveWith(f,[d,T,k]):v.rejectWith(f,[k,T,g]),k.statusCode(y),y=void 0,l&&h.trigger(a?"ajaxSuccess":"ajaxError",[k,p,a?d:g]),m.fireWith(f,[k,T]),l&&(h.trigger("ajaxComplete",[k,p]),--fe.active||fe.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var r,a,o,s,c,l,u,d,p=fe.ajaxSetup({},n),f=p.context||p,h=p.context&&(f.nodeType||f.jquery)?fe(f):fe.event,v=fe.Deferred(),m=fe.Callbacks("once memory"),y=p.statusCode||{},g={},b={},x=0,w="canceled",k={readyState:0,getResponseHeader:function(e){var t;if(2===x){if(!d)for(d={};t=Jt.exec(s);)d[t[1].toLowerCase()]=t[2];t=d[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===x?s:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return x||(e=b[n]=b[n]||e,g[e]=t),this},overrideMimeType:function(e){return x||(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(x<2)for(t in e)y[t]=[y[t],e[t]];else k.always(e[k.status]);return this},abort:function(e){var t=e||w;return u&&u.abort(t),i(0,t),this}};if(v.promise(k).complete=m.add,k.success=k.done,k.error=k.fail,p.url=((t||p.url||en)+"").replace($t,"").replace(Yt,tn[1]+"//"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=fe.trim(p.dataType||"*").toLowerCase().match(Ne)||[""],null==p.crossDomain&&(r=Gt.exec(p.url.toLowerCase()),p.crossDomain=!(!r||r[1]===tn[1]&&r[2]===tn[2]&&(r[3]||("http:"===r[1]?"80":"443"))===(tn[3]||("http:"===tn[1]?"80":"443")))),p.data&&p.processData&&"string"!=typeof p.data&&(p.data=fe.param(p.data,p.traditional)),J(Qt,p,n,k),2===x)return k;l=fe.event&&p.global,l&&0===fe.active++&&fe.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Vt.test(p.type),o=p.url,p.hasContent||(p.data&&(o=p.url+=(Bt.test(o)?"&":"?")+p.data,delete p.data),p.cache===!1&&(p.url=Xt.test(o)?o.replace(Xt,"$1_="+It++):o+(Bt.test(o)?"&":"?")+"_="+It++)),p.ifModified&&(fe.lastModified[o]&&k.setRequestHeader("If-Modified-Since",fe.lastModified[o]),fe.etag[o]&&k.setRequestHeader("If-None-Match",fe.etag[o])),(p.data&&p.hasContent&&p.contentType!==!1||n.contentType)&&k.setRequestHeader("Content-Type",p.contentType),k.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Zt+"; q=0.01":""):p.accepts["*"]);for(a in p.headers)k.setRequestHeader(a,p.headers[a]);if(p.beforeSend&&(p.beforeSend.call(f,k,p)===!1||2===x))return k.abort();w="abort";for(a in{success:1,error:1,complete:1})k[a](p[a]);if(u=J(Kt,p,n,k)){if(k.readyState=1,l&&h.trigger("ajaxSend",[k,p]),2===x)return k;p.async&&p.timeout>0&&(c=e.setTimeout(function(){k.abort("timeout")},p.timeout));try{x=1,u.send(g,i)}catch(e){if(!(x<2))throw e;i(-1,e)}}else i(-1,"No Transport");return k},getJSON:function(e,t,n){return fe.get(e,t,n,"json")},getScript:function(e,t){return fe.get(e,void 0,t,"script")}}),fe.each(["get","post"],function(e,t){fe[t]=function(e,n,i,r){return fe.isFunction(n)&&(r=r||i,i=n,n=void 0),fe.ajax(fe.extend({url:e,type:t,dataType:r,data:n,success:i},fe.isPlainObject(e)&&e))}}),fe._evalUrl=function(e){return fe.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},fe.fn.extend({wrapAll:function(e){if(fe.isFunction(e))return this.each(function(t){fe(this).wrapAll(e.call(this,t))});if(this[0]){var t=fe(e,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstChild&&1===e.firstChild.nodeType;)e=e.firstChild;return e}).append(this)}return this},wrapInner:function(e){return fe.isFunction(e)?this.each(function(t){fe(this).wrapInner(e.call(this,t))}):this.each(function(){var t=fe(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=fe.isFunction(e);return this.each(function(n){fe(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){fe.nodeName(this,"body")||fe(this).replaceWith(this.childNodes)}).end()}}),fe.expr.filters.hidden=function(e){return de.reliableHiddenOffsets()?e.offsetWidth<=0&&e.offsetHeight<=0&&!e.getClientRects().length:Q(e)},fe.expr.filters.visible=function(e){return!fe.expr.filters.hidden(e)};var nn=/%20/g,rn=/\[\]$/,an=/\r?\n/g,on=/^(?:submit|button|image|reset|file)$/i,sn=/^(?:input|select|textarea|keygen)/i;fe.param=function(e,t){var n,i=[],r=function(e,t){t=fe.isFunction(t)?t():null==t?"":t,i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(t)};if(void 0===t&&(t=fe.ajaxSettings&&fe.ajaxSettings.traditional),fe.isArray(e)||e.jquery&&!fe.isPlainObject(e))fe.each(e,function(){r(this.name,this.value)});else for(n in e)K(n,e[n],t,r);return i.join("&").replace(nn,"+")},fe.fn.extend({serialize:function(){return fe.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=fe.prop(this,"elements");return e?fe.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!fe(this).is(":disabled")&&sn.test(this.nodeName)&&!on.test(e)&&(this.checked||!ze.test(e))}).map(function(e,t){var n=fe(this).val();return null==n?null:fe.isArray(n)?fe.map(n,function(e){return{name:t.name,value:e.replace(an,"\r\n")}}):{name:t.name,value:n.replace(an,"\r\n")}}).get()}}),fe.ajaxSettings.xhr=void 0!==e.ActiveXObject?function(){return this.isLocal?ee():ie.documentMode>8?Z():/^(get|post|head|put|delete|options)$/i.test(this.type)&&Z()||ee()}:Z;var cn=0,ln={},un=fe.ajaxSettings.xhr();e.attachEvent&&e.attachEvent("onunload",function(){for(var e in ln)ln[e](void 0,!0)}),de.cors=!!un&&"withCredentials"in un,un=de.ajax=!!un,un&&fe.ajaxTransport(function(t){if(!t.crossDomain||de.cors){var n;return{send:function(i,r){var a,o=t.xhr(),s=++cn;if(o.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)o[a]=t.xhrFields[a];t.mimeType&&o.overrideMimeType&&o.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(a in i)void 0!==i[a]&&o.setRequestHeader(a,i[a]+"");o.send(t.hasContent&&t.data||null),n=function(e,i){var a,c,l;if(n&&(i||4===o.readyState))if(delete ln[s],n=void 0,o.onreadystatechange=fe.noop,i)4!==o.readyState&&o.abort();else{l={},a=o.status,"string"==typeof o.responseText&&(l.text=o.responseText);try{c=o.statusText}catch(e){c=""}a||!t.isLocal||t.crossDomain?1223===a&&(a=204):a=l.text?200:404}l&&r(a,c,l,o.getAllResponseHeaders())},t.async?4===o.readyState?e.setTimeout(n):o.onreadystatechange=ln[s]=n:n()},abort:function(){n&&n(void 0,!0)}}}}),fe.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return fe.globalEval(e),e}}}),fe.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET",e.global=!1)}),fe.ajaxTransport("script",function(e){if(e.crossDomain){var t,n=ie.head||fe("head")[0]||ie.documentElement;return{send:function(i,r){t=ie.createElement("script"),t.async=!0,e.scriptCharset&&(t.charset=e.scriptCharset),t.src=e.url,t.onload=t.onreadystatechange=function(e,n){(n||!t.readyState||/loaded|complete/.test(t.readyState))&&(t.onload=t.onreadystatechange=null,t.parentNode&&t.parentNode.removeChild(t),t=null,n||r(200,"success"))},n.insertBefore(t,n.firstChild)},abort:function(){t&&t.onload(void 0,!0)}}}});var dn=[],pn=/(=)\?(?=&|$)|\?\?/;fe.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=dn.pop()||fe.expando+"_"+It++;return this[e]=!0,e}}),fe.ajaxPrefilter("json jsonp",function(t,n,i){var r,a,o,s=t.jsonp!==!1&&(pn.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&pn.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=fe.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(pn,"$1"+r):t.jsonp!==!1&&(t.url+=(Bt.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return o||fe.error(r+" was not called"),o[0]},t.dataTypes[0]="json",a=e[r],e[r]=function(){o=arguments},i.always(function(){void 0===a?fe(e).removeProp(r):e[r]=a,t[r]&&(t.jsonpCallback=n.jsonpCallback,dn.push(r)),o&&fe.isFunction(a)&&a(o[0]),o=a=void 0}),"script"}),fe.parseHTML=function(e,t,n){if(!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t,t=!1),t=t||ie;var i=ke.exec(e),r=!n&&[];return i?[t.createElement(i[1])]:(i=y([e],t,r),r&&r.length&&fe(r).remove(),fe.merge([],i.childNodes))};var fn=fe.fn.load;fe.fn.load=function(e,t,n){if("string"!=typeof e&&fn)return fn.apply(this,arguments);var i,r,a,o=this,s=e.indexOf(" ");return s>-1&&(i=fe.trim(e.slice(s,e.length)),e=e.slice(0,s)),fe.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),o.length>0&&fe.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){a=arguments,o.html(i?fe("<div>").append(fe.parseHTML(e)).find(i):e)}).always(n&&function(e,t){o.each(function(){n.apply(this,a||[e.responseText,t,e])})}),this},fe.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){fe.fn[t]=function(e){return this.on(t,e)}}),fe.expr.filters.animated=function(e){return fe.grep(fe.timers,function(t){return e===t.elem}).length},fe.offset={setOffset:function(e,t,n){var i,r,a,o,s,c,l,u=fe.css(e,"position"),d=fe(e),p={};"static"===u&&(e.style.position="relative"),s=d.offset(),a=fe.css(e,"top"),c=fe.css(e,"left"),l=("absolute"===u||"fixed"===u)&&fe.inArray("auto",[a,c])>-1,l?(i=d.position(),o=i.top,r=i.left):(o=parseFloat(a)||0,r=parseFloat(c)||0),fe.isFunction(t)&&(t=t.call(e,n,fe.extend({},s))),null!=t.top&&(p.top=t.top-s.top+o),null!=t.left&&(p.left=t.left-s.left+r),"using"in t?t.using.call(e,p):d.css(p)}},fe.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){fe.offset.setOffset(this,e,t)});var t,n,i={top:0,left:0},r=this[0],a=r&&r.ownerDocument;if(a)return t=a.documentElement,fe.contains(t,r)?("undefined"!=typeof r.getBoundingClientRect&&(i=r.getBoundingClientRect()),n=te(a),{top:i.top+(n.pageYOffset||t.scrollTop)-(t.clientTop||0),left:i.left+(n.pageXOffset||t.scrollLeft)-(t.clientLeft||0)}):i},position:function(){if(this[0]){var e,t,n={top:0,left:0},i=this[0];return"fixed"===fe.css(i,"position")?t=i.getBoundingClientRect():(e=this.offsetParent(),
t=this.offset(),fe.nodeName(e[0],"html")||(n=e.offset()),n.top+=fe.css(e[0],"borderTopWidth",!0),n.left+=fe.css(e[0],"borderLeftWidth",!0)),{top:t.top-n.top-fe.css(i,"marginTop",!0),left:t.left-n.left-fe.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&!fe.nodeName(e,"html")&&"static"===fe.css(e,"position");)e=e.offsetParent;return e||ft})}}),fe.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n=/Y/.test(t);fe.fn[e]=function(i){return Oe(this,function(e,i,r){var a=te(e);return void 0===r?a?t in a?a[t]:a.document.documentElement[i]:e[i]:void(a?a.scrollTo(n?fe(a).scrollLeft():r,n?r:fe(a).scrollTop()):e[i]=r)},e,i,arguments.length,null)}}),fe.each(["top","left"],function(e,t){fe.cssHooks[t]=D(de.pixelPosition,function(e,n){if(n)return n=vt(e,t),dt.test(n)?fe(e).position()[t]+"px":n})}),fe.each({Height:"height",Width:"width"},function(e,t){fe.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){fe.fn[i]=function(i,r){var a=arguments.length&&(n||"boolean"!=typeof i),o=n||(i===!0||r===!0?"margin":"border");return Oe(this,function(t,n,i){var r;return fe.isWindow(t)?t.document.documentElement["client"+e]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])):void 0===i?fe.css(t,n,o):fe.style(t,n,i,o)},t,a?i:void 0,a,null)}})}),fe.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),fe.fn.size=function(){return this.length},fe.fn.andSelf=fe.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return fe});var hn=e.jQuery,vn=e.$;return fe.noConflict=function(t){return e.$===fe&&(e.$=vn),t&&e.jQuery===fe&&(e.jQuery=hn),fe},t||(e.jQuery=e.$=fe),fe}),function(e){"use strict";e.fn.stickMe=function(t){function n(){h.animate===!0&&"slide"===h.transitionStyle&&h.stickyAlready!==!0&&d.slideDown(h.transitionDuration),h.animate===!0&&"fade"===h.transitionStyle&&h.stickyAlready!==!0?d.fadeIn(h.transitionDuration):d.show(),d.removeClass("not-sticking")}function i(){d.hasClass("sticking")&&d.trigger("sticking"),0===u&&(u=1,h.stickyAlready===!1&&d.trigger("sticky-begin")),d.hasClass("not-sticking")&&(d.hide(),n()),h.shadow===!0&&d.css("box-shadow","0px 1px 2px rgba(0,0,0,"+h.shadowOpacity+")"),d.addClass("sticking").css("position","fixed").css("top","0"),l.css("padding-top",p)}function r(){h.shadow===!0&&d.css("box-shadow","none"),d.addClass("not-sticking").removeClass("sticking").show().css("position","relative"),l.css("padding-top","0")}var a,o,s=e(window),c=e(document),l=e("body"),u=0,d=this,p=d.innerHeight(),f=s.height()/2,h=e.extend({transitionDuration:300,shadow:!1,shadowOpacity:.3,animate:!0,triggerAtCenter:!0,topOffset:p,transitionStyle:"fade",stickyAlready:!1},t);switch(d.addClass("stick-me").addClass("not-sticking"),h.triggerAtCenter){case h.triggerAtCenter&&h.topOffset<p||h.triggerAtCenter&&h.topOffset>p:h.triggerAtCenter=!1}return h.stickyAlready&&(h.triggerAtCenter=!1,h.topOffset=0,i()),a=d.offset().top,s.scroll(function(){o=s.scrollTop(),0===o&&(u=0,d.trigger("top-reached")),h.triggerAtCenter===!0&&o>f+p&&i(),h.triggerAtCenter===!1&&o>h.topOffset&&i(),o+s.height()>c.height()-1&&d.trigger("bottom-reached"),h.triggerAtCenter===!0&&o<1+a&&r(),h.triggerAtCenter===!1&&o<1&&h.stickyAlready!==!0&&r()}),this}}(jQuery);var pJS=function(e,t){var n=document.querySelector("#"+e+" > .particles-js-canvas-el");this.pJS={canvas:{el:n,w:n.offsetWidth,h:n.offsetHeight},particles:{number:{value:400,density:{enable:!0,value_area:800}},color:{value:"#fff"},shape:{type:"circle",stroke:{width:0,color:"#ff0000"},polygon:{nb_sides:5},image:{src:"",width:100,height:100}},opacity:{value:1,random:!1,anim:{enable:!1,speed:2,opacity_min:0,sync:!1}},size:{value:20,random:!1,anim:{enable:!1,speed:20,size_min:0,sync:!1}},line_linked:{enable:!0,distance:100,color:"#fff",opacity:1,width:1},move:{enable:!0,speed:2,direction:"none",random:!1,straight:!1,out_mode:"out",bounce:!1,attract:{enable:!1,rotateX:3e3,rotateY:3e3}},array:[]},interactivity:{detect_on:"canvas",events:{onhover:{enable:!0,mode:"grab"},onclick:{enable:!0,mode:"push"},resize:!0},modes:{grab:{distance:100,line_linked:{opacity:1}},bubble:{distance:200,size:80,duration:.4},repulse:{distance:200,duration:.4},push:{particles_nb:4},remove:{particles_nb:2}},mouse:{}},retina_detect:!1,fn:{interact:{},modes:{},vendors:{}},tmp:{}};var i=this.pJS;t&&Object.deepExtend(i,t),i.tmp.obj={size_value:i.particles.size.value,size_anim_speed:i.particles.size.anim.speed,move_speed:i.particles.move.speed,line_linked_distance:i.particles.line_linked.distance,line_linked_width:i.particles.line_linked.width,mode_grab_distance:i.interactivity.modes.grab.distance,mode_bubble_distance:i.interactivity.modes.bubble.distance,mode_bubble_size:i.interactivity.modes.bubble.size,mode_repulse_distance:i.interactivity.modes.repulse.distance},i.fn.retinaInit=function(){i.retina_detect&&window.devicePixelRatio>1?(i.canvas.pxratio=window.devicePixelRatio,i.tmp.retina=!0):(i.canvas.pxratio=1,i.tmp.retina=!1),i.canvas.w=i.canvas.el.offsetWidth*i.canvas.pxratio,i.canvas.h=i.canvas.el.offsetHeight*i.canvas.pxratio,i.particles.size.value=i.tmp.obj.size_value*i.canvas.pxratio,i.particles.size.anim.speed=i.tmp.obj.size_anim_speed*i.canvas.pxratio,i.particles.move.speed=i.tmp.obj.move_speed*i.canvas.pxratio,i.particles.line_linked.distance=i.tmp.obj.line_linked_distance*i.canvas.pxratio,i.interactivity.modes.grab.distance=i.tmp.obj.mode_grab_distance*i.canvas.pxratio,i.interactivity.modes.bubble.distance=i.tmp.obj.mode_bubble_distance*i.canvas.pxratio,i.particles.line_linked.width=i.tmp.obj.line_linked_width*i.canvas.pxratio,i.interactivity.modes.bubble.size=i.tmp.obj.mode_bubble_size*i.canvas.pxratio,i.interactivity.modes.repulse.distance=i.tmp.obj.mode_repulse_distance*i.canvas.pxratio},i.fn.canvasInit=function(){i.canvas.ctx=i.canvas.el.getContext("2d")},i.fn.canvasSize=function(){i.canvas.el.width=i.canvas.w,i.canvas.el.height=i.canvas.h,i&&i.interactivity.events.resize&&window.addEventListener("resize",function(){i.canvas.w=i.canvas.el.offsetWidth,i.canvas.h=i.canvas.el.offsetHeight,i.tmp.retina&&(i.canvas.w*=i.canvas.pxratio,i.canvas.h*=i.canvas.pxratio),i.canvas.el.width=i.canvas.w,i.canvas.el.height=i.canvas.h,i.particles.move.enable||(i.fn.particlesEmpty(),i.fn.particlesCreate(),i.fn.particlesDraw(),i.fn.vendors.densityAutoParticles()),i.fn.vendors.densityAutoParticles()})},i.fn.canvasPaint=function(){i.canvas.ctx.fillRect(0,0,i.canvas.w,i.canvas.h)},i.fn.canvasClear=function(){i.canvas.ctx.clearRect(0,0,i.canvas.w,i.canvas.h)},i.fn.particle=function(e,t,n){if(this.radius=(i.particles.size.random?Math.random():1)*i.particles.size.value,i.particles.size.anim.enable&&(this.size_status=!1,this.vs=i.particles.size.anim.speed/100,i.particles.size.anim.sync||(this.vs=this.vs*Math.random())),this.x=n?n.x:Math.random()*i.canvas.w,this.y=n?n.y:Math.random()*i.canvas.h,this.x>i.canvas.w-2*this.radius?this.x=this.x-this.radius:this.x<2*this.radius&&(this.x=this.x+this.radius),this.y>i.canvas.h-2*this.radius?this.y=this.y-this.radius:this.y<2*this.radius&&(this.y=this.y+this.radius),i.particles.move.bounce&&i.fn.vendors.checkOverlap(this,n),this.color={},"object"==typeof e.value)if(e.value instanceof Array){var r=e.value[Math.floor(Math.random()*i.particles.color.value.length)];this.color.rgb=hexToRgb(r)}else void 0!=e.value.r&&void 0!=e.value.g&&void 0!=e.value.b&&(this.color.rgb={r:e.value.r,g:e.value.g,b:e.value.b}),void 0!=e.value.h&&void 0!=e.value.s&&void 0!=e.value.l&&(this.color.hsl={h:e.value.h,s:e.value.s,l:e.value.l});else"random"==e.value?this.color.rgb={r:Math.floor(256*Math.random())+0,g:Math.floor(256*Math.random())+0,b:Math.floor(256*Math.random())+0}:"string"==typeof e.value&&(this.color=e,this.color.rgb=hexToRgb(this.color.value));this.opacity=(i.particles.opacity.random?Math.random():1)*i.particles.opacity.value,i.particles.opacity.anim.enable&&(this.opacity_status=!1,this.vo=i.particles.opacity.anim.speed/100,i.particles.opacity.anim.sync||(this.vo=this.vo*Math.random()));var a={};switch(i.particles.move.direction){case"top":a={x:0,y:-1};break;case"top-right":a={x:.5,y:-.5};break;case"right":a={x:1,y:-0};break;case"bottom-right":a={x:.5,y:.5};break;case"bottom":a={x:0,y:1};break;case"bottom-left":a={x:-.5,y:1};break;case"left":a={x:-1,y:0};break;case"top-left":a={x:-.5,y:-.5};break;default:a={x:0,y:0}}i.particles.move.straight?(this.vx=a.x,this.vy=a.y,i.particles.move.random&&(this.vx=this.vx*Math.random(),this.vy=this.vy*Math.random())):(this.vx=a.x+Math.random()-.5,this.vy=a.y+Math.random()-.5),this.vx_i=this.vx,this.vy_i=this.vy;var o=i.particles.shape.type;if("object"==typeof o){if(o instanceof Array){var s=o[Math.floor(Math.random()*o.length)];this.shape=s}}else this.shape=o;if("image"==this.shape){var c=i.particles.shape;this.img={src:c.image.src,ratio:c.image.width/c.image.height},this.img.ratio||(this.img.ratio=1),"svg"==i.tmp.img_type&&void 0!=i.tmp.source_svg&&(i.fn.vendors.createSvgImg(this),i.tmp.pushing&&(this.img.loaded=!1))}},i.fn.particle.prototype.draw=function(){function e(){i.canvas.ctx.drawImage(o,t.x-n,t.y-n,2*n,2*n/t.img.ratio)}var t=this;if(void 0!=t.radius_bubble)var n=t.radius_bubble;else var n=t.radius;if(void 0!=t.opacity_bubble)var r=t.opacity_bubble;else var r=t.opacity;if(t.color.rgb)var a="rgba("+t.color.rgb.r+","+t.color.rgb.g+","+t.color.rgb.b+","+r+")";else var a="hsla("+t.color.hsl.h+","+t.color.hsl.s+"%,"+t.color.hsl.l+"%,"+r+")";switch(i.canvas.ctx.fillStyle=a,i.canvas.ctx.beginPath(),t.shape){case"circle":i.canvas.ctx.arc(t.x,t.y,n,0,2*Math.PI,!1);break;case"edge":i.canvas.ctx.rect(t.x-n,t.y-n,2*n,2*n);break;case"triangle":i.fn.vendors.drawShape(i.canvas.ctx,t.x-n,t.y+n/1.66,2*n,3,2);break;case"polygon":i.fn.vendors.drawShape(i.canvas.ctx,t.x-n/(i.particles.shape.polygon.nb_sides/3.5),t.y-n/.76,2.66*n/(i.particles.shape.polygon.nb_sides/3),i.particles.shape.polygon.nb_sides,1);break;case"star":i.fn.vendors.drawShape(i.canvas.ctx,t.x-2*n/(i.particles.shape.polygon.nb_sides/4),t.y-n/1.52,2*n*2.66/(i.particles.shape.polygon.nb_sides/3),i.particles.shape.polygon.nb_sides,2);break;case"image":if("svg"==i.tmp.img_type)var o=t.img.obj;else var o=i.tmp.img_obj;o&&e()}i.canvas.ctx.closePath(),i.particles.shape.stroke.width>0&&(i.canvas.ctx.strokeStyle=i.particles.shape.stroke.color,i.canvas.ctx.lineWidth=i.particles.shape.stroke.width,i.canvas.ctx.stroke()),i.canvas.ctx.fill()},i.fn.particlesCreate=function(){for(var e=0;e<i.particles.number.value;e++)i.particles.array.push(new i.fn.particle(i.particles.color,i.particles.opacity.value))},i.fn.particlesUpdate=function(){for(var e=0;e<i.particles.array.length;e++){var t=i.particles.array[e];if(i.particles.move.enable){var n=i.particles.move.speed/2;t.x+=t.vx*n,t.y+=t.vy*n}if(i.particles.opacity.anim.enable&&(1==t.opacity_status?(t.opacity>=i.particles.opacity.value&&(t.opacity_status=!1),t.opacity+=t.vo):(t.opacity<=i.particles.opacity.anim.opacity_min&&(t.opacity_status=!0),t.opacity-=t.vo),t.opacity<0&&(t.opacity=0)),i.particles.size.anim.enable&&(1==t.size_status?(t.radius>=i.particles.size.value&&(t.size_status=!1),t.radius+=t.vs):(t.radius<=i.particles.size.anim.size_min&&(t.size_status=!0),t.radius-=t.vs),t.radius<0&&(t.radius=0)),"bounce"==i.particles.move.out_mode)var r={x_left:t.radius,x_right:i.canvas.w,y_top:t.radius,y_bottom:i.canvas.h};else var r={x_left:-t.radius,x_right:i.canvas.w+t.radius,y_top:-t.radius,y_bottom:i.canvas.h+t.radius};switch(t.x-t.radius>i.canvas.w?(t.x=r.x_left,t.y=Math.random()*i.canvas.h):t.x+t.radius<0&&(t.x=r.x_right,t.y=Math.random()*i.canvas.h),t.y-t.radius>i.canvas.h?(t.y=r.y_top,t.x=Math.random()*i.canvas.w):t.y+t.radius<0&&(t.y=r.y_bottom,t.x=Math.random()*i.canvas.w),i.particles.move.out_mode){case"bounce":t.x+t.radius>i.canvas.w?t.vx=-t.vx:t.x-t.radius<0&&(t.vx=-t.vx),t.y+t.radius>i.canvas.h?t.vy=-t.vy:t.y-t.radius<0&&(t.vy=-t.vy)}if(isInArray("grab",i.interactivity.events.onhover.mode)&&i.fn.modes.grabParticle(t),(isInArray("bubble",i.interactivity.events.onhover.mode)||isInArray("bubble",i.interactivity.events.onclick.mode))&&i.fn.modes.bubbleParticle(t),(isInArray("repulse",i.interactivity.events.onhover.mode)||isInArray("repulse",i.interactivity.events.onclick.mode))&&i.fn.modes.repulseParticle(t),i.particles.line_linked.enable||i.particles.move.attract.enable)for(var a=e+1;a<i.particles.array.length;a++){var o=i.particles.array[a];i.particles.line_linked.enable&&i.fn.interact.linkParticles(t,o),i.particles.move.attract.enable&&i.fn.interact.attractParticles(t,o),i.particles.move.bounce&&i.fn.interact.bounceParticles(t,o)}}},i.fn.particlesDraw=function(){i.canvas.ctx.clearRect(0,0,i.canvas.w,i.canvas.h),i.fn.particlesUpdate();for(var e=0;e<i.particles.array.length;e++){var t=i.particles.array[e];t.draw()}},i.fn.particlesEmpty=function(){i.particles.array=[]},i.fn.particlesRefresh=function(){cancelRequestAnimFrame(i.fn.checkAnimFrame),cancelRequestAnimFrame(i.fn.drawAnimFrame),i.tmp.source_svg=void 0,i.tmp.img_obj=void 0,i.tmp.count_svg=0,i.fn.particlesEmpty(),i.fn.canvasClear(),i.fn.vendors.start()},i.fn.interact.linkParticles=function(e,t){var n=e.x-t.x,r=e.y-t.y,a=Math.sqrt(n*n+r*r);if(a<=i.particles.line_linked.distance){var o=i.particles.line_linked.opacity-a/(1/i.particles.line_linked.opacity)/i.particles.line_linked.distance;if(o>0){var s=i.particles.line_linked.color_rgb_line;i.canvas.ctx.strokeStyle="rgba("+s.r+","+s.g+","+s.b+","+o+")",i.canvas.ctx.lineWidth=i.particles.line_linked.width,i.canvas.ctx.beginPath(),i.canvas.ctx.moveTo(e.x,e.y),i.canvas.ctx.lineTo(t.x,t.y),i.canvas.ctx.stroke(),i.canvas.ctx.closePath()}}},i.fn.interact.attractParticles=function(e,t){var n=e.x-t.x,r=e.y-t.y,a=Math.sqrt(n*n+r*r);if(a<=i.particles.line_linked.distance){var o=n/(1e3*i.particles.move.attract.rotateX),s=r/(1e3*i.particles.move.attract.rotateY);e.vx-=o,e.vy-=s,t.vx+=o,t.vy+=s}},i.fn.interact.bounceParticles=function(e,t){var n=e.x-t.x,i=e.y-t.y,r=Math.sqrt(n*n+i*i),a=e.radius+t.radius;r<=a&&(e.vx=-e.vx,e.vy=-e.vy,t.vx=-t.vx,t.vy=-t.vy)},i.fn.modes.pushParticles=function(e,t){i.tmp.pushing=!0;for(var n=0;n<e;n++)i.particles.array.push(new i.fn.particle(i.particles.color,i.particles.opacity.value,{x:t?t.pos_x:Math.random()*i.canvas.w,y:t?t.pos_y:Math.random()*i.canvas.h})),n==e-1&&(i.particles.move.enable||i.fn.particlesDraw(),i.tmp.pushing=!1)},i.fn.modes.removeParticles=function(e){i.particles.array.splice(0,e),i.particles.move.enable||i.fn.particlesDraw()},i.fn.modes.bubbleParticle=function(e){function t(){e.opacity_bubble=e.opacity,e.radius_bubble=e.radius}function n(t,n,r,a,s){if(t!=n)if(i.tmp.bubble_duration_end){if(void 0!=r){var c=a-d*(a-t)/i.interactivity.modes.bubble.duration,l=t-c;p=t+l,"size"==s&&(e.radius_bubble=p),"opacity"==s&&(e.opacity_bubble=p)}}else if(o<=i.interactivity.modes.bubble.distance){if(void 0!=r)var u=r;else var u=a;if(u!=t){var p=a-d*(a-t)/i.interactivity.modes.bubble.duration;"size"==s&&(e.radius_bubble=p),"opacity"==s&&(e.opacity_bubble=p)}}else"size"==s&&(e.radius_bubble=void 0),"opacity"==s&&(e.opacity_bubble=void 0)}if(i.interactivity.events.onhover.enable&&isInArray("bubble",i.interactivity.events.onhover.mode)){var r=e.x-i.interactivity.mouse.pos_x,a=e.y-i.interactivity.mouse.pos_y,o=Math.sqrt(r*r+a*a),s=1-o/i.interactivity.modes.bubble.distance;if(o<=i.interactivity.modes.bubble.distance){if(s>=0&&"mousemove"==i.interactivity.status){if(i.interactivity.modes.bubble.size!=i.particles.size.value)if(i.interactivity.modes.bubble.size>i.particles.size.value){var c=e.radius+i.interactivity.modes.bubble.size*s;c>=0&&(e.radius_bubble=c)}else{var l=e.radius-i.interactivity.modes.bubble.size,c=e.radius-l*s;c>0?e.radius_bubble=c:e.radius_bubble=0}if(i.interactivity.modes.bubble.opacity!=i.particles.opacity.value)if(i.interactivity.modes.bubble.opacity>i.particles.opacity.value){var u=i.interactivity.modes.bubble.opacity*s;u>e.opacity&&u<=i.interactivity.modes.bubble.opacity&&(e.opacity_bubble=u)}else{var u=e.opacity-(i.particles.opacity.value-i.interactivity.modes.bubble.opacity)*s;u<e.opacity&&u>=i.interactivity.modes.bubble.opacity&&(e.opacity_bubble=u)}}}else t();"mouseleave"==i.interactivity.status&&t()}else if(i.interactivity.events.onclick.enable&&isInArray("bubble",i.interactivity.events.onclick.mode)){if(i.tmp.bubble_clicking){var r=e.x-i.interactivity.mouse.click_pos_x,a=e.y-i.interactivity.mouse.click_pos_y,o=Math.sqrt(r*r+a*a),d=((new Date).getTime()-i.interactivity.mouse.click_time)/1e3;d>i.interactivity.modes.bubble.duration&&(i.tmp.bubble_duration_end=!0),d>2*i.interactivity.modes.bubble.duration&&(i.tmp.bubble_clicking=!1,i.tmp.bubble_duration_end=!1)}i.tmp.bubble_clicking&&(n(i.interactivity.modes.bubble.size,i.particles.size.value,e.radius_bubble,e.radius,"size"),n(i.interactivity.modes.bubble.opacity,i.particles.opacity.value,e.opacity_bubble,e.opacity,"opacity"))}},i.fn.modes.repulseParticle=function(e){function t(){var t=Math.atan2(p,d);if(e.vx=h*Math.cos(t),e.vy=h*Math.sin(t),"bounce"==i.particles.move.out_mode){var n={x:e.x+e.vx,y:e.y+e.vy};n.x+e.radius>i.canvas.w?e.vx=-e.vx:n.x-e.radius<0&&(e.vx=-e.vx),n.y+e.radius>i.canvas.h?e.vy=-e.vy:n.y-e.radius<0&&(e.vy=-e.vy)}}if(i.interactivity.events.onhover.enable&&isInArray("repulse",i.interactivity.events.onhover.mode)&&"mousemove"==i.interactivity.status){var n=e.x-i.interactivity.mouse.pos_x,r=e.y-i.interactivity.mouse.pos_y,a=Math.sqrt(n*n+r*r),o={x:n/a,y:r/a},s=i.interactivity.modes.repulse.distance,c=100,l=clamp(1/s*(-1*Math.pow(a/s,2)+1)*s*c,0,50),u={x:e.x+o.x*l,y:e.y+o.y*l};"bounce"==i.particles.move.out_mode?(u.x-e.radius>0&&u.x+e.radius<i.canvas.w&&(e.x=u.x),u.y-e.radius>0&&u.y+e.radius<i.canvas.h&&(e.y=u.y)):(e.x=u.x,e.y=u.y)}else if(i.interactivity.events.onclick.enable&&isInArray("repulse",i.interactivity.events.onclick.mode))if(i.tmp.repulse_finish||(i.tmp.repulse_count++,i.tmp.repulse_count==i.particles.array.length&&(i.tmp.repulse_finish=!0)),i.tmp.repulse_clicking){var s=Math.pow(i.interactivity.modes.repulse.distance/6,3),d=i.interactivity.mouse.click_pos_x-e.x,p=i.interactivity.mouse.click_pos_y-e.y,f=d*d+p*p,h=-s/f*1;f<=s&&t()}else 0==i.tmp.repulse_clicking&&(e.vx=e.vx_i,e.vy=e.vy_i)},i.fn.modes.grabParticle=function(e){if(i.interactivity.events.onhover.enable&&"mousemove"==i.interactivity.status){var t=e.x-i.interactivity.mouse.pos_x,n=e.y-i.interactivity.mouse.pos_y,r=Math.sqrt(t*t+n*n);if(r<=i.interactivity.modes.grab.distance){var a=i.interactivity.modes.grab.line_linked.opacity-r/(1/i.interactivity.modes.grab.line_linked.opacity)/i.interactivity.modes.grab.distance;if(a>0){var o=i.particles.line_linked.color_rgb_line;i.canvas.ctx.strokeStyle="rgba("+o.r+","+o.g+","+o.b+","+a+")",i.canvas.ctx.lineWidth=i.particles.line_linked.width,i.canvas.ctx.beginPath(),i.canvas.ctx.moveTo(e.x,e.y),i.canvas.ctx.lineTo(i.interactivity.mouse.pos_x,i.interactivity.mouse.pos_y),i.canvas.ctx.stroke(),i.canvas.ctx.closePath()}}}},i.fn.vendors.eventsListeners=function(){"window"==i.interactivity.detect_on?i.interactivity.el=window:i.interactivity.el=i.canvas.el,(i.interactivity.events.onhover.enable||i.interactivity.events.onclick.enable)&&(i.interactivity.el.addEventListener("mousemove",function(e){if(i.interactivity.el==window)var t=e.clientX,n=e.clientY;else var t=e.offsetX||e.clientX,n=e.offsetY||e.clientY;i.interactivity.mouse.pos_x=t,i.interactivity.mouse.pos_y=n,i.tmp.retina&&(i.interactivity.mouse.pos_x*=i.canvas.pxratio,i.interactivity.mouse.pos_y*=i.canvas.pxratio),i.interactivity.status="mousemove"}),i.interactivity.el.addEventListener("mouseleave",function(e){i.interactivity.mouse.pos_x=null,i.interactivity.mouse.pos_y=null,i.interactivity.status="mouseleave"})),i.interactivity.events.onclick.enable&&i.interactivity.el.addEventListener("click",function(){if(i.interactivity.mouse.click_pos_x=i.interactivity.mouse.pos_x,i.interactivity.mouse.click_pos_y=i.interactivity.mouse.pos_y,i.interactivity.mouse.click_time=(new Date).getTime(),i.interactivity.events.onclick.enable)switch(i.interactivity.events.onclick.mode){case"push":i.particles.move.enable?i.fn.modes.pushParticles(i.interactivity.modes.push.particles_nb,i.interactivity.mouse):1==i.interactivity.modes.push.particles_nb?i.fn.modes.pushParticles(i.interactivity.modes.push.particles_nb,i.interactivity.mouse):i.interactivity.modes.push.particles_nb>1&&i.fn.modes.pushParticles(i.interactivity.modes.push.particles_nb);break;case"remove":i.fn.modes.removeParticles(i.interactivity.modes.remove.particles_nb);break;case"bubble":i.tmp.bubble_clicking=!0;break;case"repulse":i.tmp.repulse_clicking=!0,i.tmp.repulse_count=0,i.tmp.repulse_finish=!1,setTimeout(function(){i.tmp.repulse_clicking=!1},1e3*i.interactivity.modes.repulse.duration)}})},i.fn.vendors.densityAutoParticles=function(){if(i.particles.number.density.enable){var e=i.canvas.el.width*i.canvas.el.height/1e3;i.tmp.retina&&(e/=2*i.canvas.pxratio);var t=e*i.particles.number.value/i.particles.number.density.value_area,n=i.particles.array.length-t;n<0?i.fn.modes.pushParticles(Math.abs(n)):i.fn.modes.removeParticles(n)}},i.fn.vendors.checkOverlap=function(e,t){for(var n=0;n<i.particles.array.length;n++){var r=i.particles.array[n],a=e.x-r.x,o=e.y-r.y,s=Math.sqrt(a*a+o*o);s<=e.radius+r.radius&&(e.x=t?t.x:Math.random()*i.canvas.w,e.y=t?t.y:Math.random()*i.canvas.h,i.fn.vendors.checkOverlap(e))}},i.fn.vendors.createSvgImg=function(e){var t=i.tmp.source_svg,n=/#([0-9A-F]{3,6})/gi,r=t.replace(n,function(t,n,i,r){if(e.color.rgb)var a="rgba("+e.color.rgb.r+","+e.color.rgb.g+","+e.color.rgb.b+","+e.opacity+")";else var a="hsla("+e.color.hsl.h+","+e.color.hsl.s+"%,"+e.color.hsl.l+"%,"+e.opacity+")";return a}),a=new Blob([r],{type:"image/svg+xml;charset=utf-8"}),o=window.URL||window.webkitURL||window,s=o.createObjectURL(a),c=new Image;c.addEventListener("load",function(){e.img.obj=c,e.img.loaded=!0,o.revokeObjectURL(s),i.tmp.count_svg++}),c.src=s},i.fn.vendors.destroypJS=function(){cancelAnimationFrame(i.fn.drawAnimFrame),n.remove(),pJSDom=null},i.fn.vendors.drawShape=function(e,t,n,i,r,a){var o=r*a,s=r/a,c=180*(s-2)/s,l=Math.PI-Math.PI*c/180;e.save(),e.beginPath(),e.translate(t,n),e.moveTo(0,0);for(var u=0;u<o;u++)e.lineTo(i,0),e.translate(i,0),e.rotate(l);e.fill(),e.restore()},i.fn.vendors.exportImg=function(){window.open(i.canvas.el.toDataURL("image/png"),"_blank")},i.fn.vendors.loadImg=function(e){if(i.tmp.img_error=void 0,""!=i.particles.shape.image.src)if("svg"==e){var t=new XMLHttpRequest;t.open("GET",i.particles.shape.image.src),t.onreadystatechange=function(e){4==t.readyState&&(200==t.status?(i.tmp.source_svg=e.currentTarget.response,i.fn.vendors.checkBeforeDraw()):(console.log("Error pJS - Image not found"),i.tmp.img_error=!0))},t.send()}else{var n=new Image;n.addEventListener("load",function(){i.tmp.img_obj=n,i.fn.vendors.checkBeforeDraw()}),n.src=i.particles.shape.image.src}else console.log("Error pJS - No image.src"),i.tmp.img_error=!0},i.fn.vendors.draw=function(){"image"==i.particles.shape.type?"svg"==i.tmp.img_type?i.tmp.count_svg>=i.particles.number.value?(i.fn.particlesDraw(),i.particles.move.enable?i.fn.drawAnimFrame=requestAnimFrame(i.fn.vendors.draw):cancelRequestAnimFrame(i.fn.drawAnimFrame)):i.tmp.img_error||(i.fn.drawAnimFrame=requestAnimFrame(i.fn.vendors.draw)):void 0!=i.tmp.img_obj?(i.fn.particlesDraw(),i.particles.move.enable?i.fn.drawAnimFrame=requestAnimFrame(i.fn.vendors.draw):cancelRequestAnimFrame(i.fn.drawAnimFrame)):i.tmp.img_error||(i.fn.drawAnimFrame=requestAnimFrame(i.fn.vendors.draw)):(i.fn.particlesDraw(),i.particles.move.enable?i.fn.drawAnimFrame=requestAnimFrame(i.fn.vendors.draw):cancelRequestAnimFrame(i.fn.drawAnimFrame))},i.fn.vendors.checkBeforeDraw=function(){"image"==i.particles.shape.type?"svg"==i.tmp.img_type&&void 0==i.tmp.source_svg?i.tmp.checkAnimFrame=requestAnimFrame(check):(cancelRequestAnimFrame(i.tmp.checkAnimFrame),i.tmp.img_error||(i.fn.vendors.init(),i.fn.vendors.draw())):(i.fn.vendors.init(),i.fn.vendors.draw())},i.fn.vendors.init=function(){i.fn.retinaInit(),i.fn.canvasInit(),i.fn.canvasSize(),i.fn.canvasPaint(),i.fn.particlesCreate(),i.fn.vendors.densityAutoParticles(),i.particles.line_linked.color_rgb_line=hexToRgb(i.particles.line_linked.color)},i.fn.vendors.start=function(){isInArray("image",i.particles.shape.type)?(i.tmp.img_type=i.particles.shape.image.src.substr(i.particles.shape.image.src.length-3),i.fn.vendors.loadImg(i.tmp.img_type)):i.fn.vendors.checkBeforeDraw()},i.fn.vendors.eventsListeners(),i.fn.vendors.start()};Object.deepExtend=function(e,t){for(var n in t)t[n]&&t[n].constructor&&t[n].constructor===Object?(e[n]=e[n]||{},arguments.callee(e[n],t[n])):e[n]=t[n];return e},window.requestAnimFrame=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e){window.setTimeout(e,1e3/60)}}(),window.cancelRequestAnimFrame=function(){return window.cancelAnimationFrame||window.webkitCancelRequestAnimationFrame||window.mozCancelRequestAnimationFrame||window.oCancelRequestAnimationFrame||window.msCancelRequestAnimationFrame||clearTimeout}(),window.pJSDom=[],window.particlesJS=function(e,t){"string"!=typeof e&&(t=e,e="particles-js"),e||(e="particles-js");var n=document.getElementById(e),i="particles-js-canvas-el",r=n.getElementsByClassName(i);if(r.length)for(;r.length>0;)n.removeChild(r[0]);var a=document.createElement("canvas");a.className=i,a.style.width="100%",a.style.height="100%";var o=document.getElementById(e).appendChild(a);null!=o&&pJSDom.push(new pJS(e,t))},window.particlesJS.load=function(e,t,n){var i=new XMLHttpRequest;i.open("GET",t),i.onreadystatechange=function(t){if(4==i.readyState)if(200==i.status){var r=JSON.parse(t.currentTarget.response);window.particlesJS(e,r),n&&n()}else console.log("Error pJS - XMLHttpRequest status: "+i.status),console.log("Error pJS - File config not found")},i.send()},!function(e){e.fn.viewportChecker=function(t){var n={classToAdd:"visible",classToRemove:"invisible",classToAddForFullView:"full-visible",removeClassAfterAnimation:!1,offset:100,repeat:!1,invertBottomOffset:!0,callbackFunction:function(e,t){},scrollHorizontal:!1,scrollBox:window};e.extend(n,t);var i=this,r={height:e(n.scrollBox).height(),width:e(n.scrollBox).width()},a=-1!=navigator.userAgent.toLowerCase().indexOf("webkit")||-1!=navigator.userAgent.toLowerCase().indexOf("windows phone")?"body":"html";return this.checkElements=function(){var t,o;n.scrollHorizontal?(t=e(a).scrollLeft(),o=t+r.width):(t=e(a).scrollTop(),o=t+r.height),i.each(function(){var i=e(this),a={},s={};if(i.data("vp-add-class")&&(s.classToAdd=i.data("vp-add-class")),i.data("vp-remove-class")&&(s.classToRemove=i.data("vp-remove-class")),i.data("vp-add-class-full-view")&&(s.classToAddForFullView=i.data("vp-add-class-full-view")),i.data("vp-keep-add-class")&&(s.removeClassAfterAnimation=i.data("vp-remove-after-animation")),i.data("vp-offset")&&(s.offset=i.data("vp-offset")),i.data("vp-repeat")&&(s.repeat=i.data("vp-repeat")),i.data("vp-scrollHorizontal")&&(s.scrollHorizontal=i.data("vp-scrollHorizontal")),i.data("vp-invertBottomOffset")&&(s.scrollHorizontal=i.data("vp-invertBottomOffset")),e.extend(a,n),e.extend(a,s),!i.data("vp-animated")||a.repeat){String(a.offset).indexOf("%")>0&&(a.offset=parseInt(a.offset)/100*r.height);var c=a.scrollHorizontal?i.offset().left:i.offset().top,l=a.scrollHorizontal?c+i.width():c+i.height(),u=Math.round(c)+a.offset,d=a.scrollHorizontal?u+i.width():u+i.height();a.invertBottomOffset&&(d-=2*a.offset),o>u&&d>t?(i.removeClass(a.classToRemove),i.addClass(a.classToAdd),a.callbackFunction(i,"add"),o>=l&&c>=t?i.addClass(a.classToAddForFullView):i.removeClass(a.classToAddForFullView),i.data("vp-animated",!0),a.removeClassAfterAnimation&&i.one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend",function(){i.removeClass(a.classToAdd)})):i.hasClass(a.classToAdd)&&a.repeat&&(i.removeClass(a.classToAdd+" "+a.classToAddForFullView),a.callbackFunction(i,"remove"),i.data("vp-animated",!1))}})},("ontouchstart"in window||"onmsgesturechange"in window)&&e(document).bind("touchmove MSPointerMove pointermove",this.checkElements),e(n.scrollBox).bind("load scroll",this.checkElements),e(window).resize(function(t){r={height:e(n.scrollBox).height(),width:e(n.scrollBox).width()},i.checkElements()}),this.checkElements(),this}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
